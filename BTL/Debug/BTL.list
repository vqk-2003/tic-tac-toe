
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a1c  08005a1c  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005a1c  08005a1c  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a1c  08005a1c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a20  08005a20  00006a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  20000068  08005a8c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001328  08005a8c  00007328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016408  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310a  00000000  00000000  0001d499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  000205a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001038  00000000  00000000  00021a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cfe  00000000  00000000  00022a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194fe  00000000  00000000  0003c77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ec5  00000000  00000000  00055c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efb41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  000efb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f5570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005838 	.word	0x08005838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005838 	.word	0x08005838

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000084 	.word	0x20000084
 800017c:	20000124 	.word	0x20000124

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f001 faa7 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f851 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f97f 	bl	8000490 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000192:	f000 f925 	bl	80003e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f951 	bl	800043c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800019a:	f000 f8a5 	bl	80002e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800019e:	f000 f8e1 	bl	8000364 <MX_ADC2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_1 */
  osThreadDef(task_1, task_1_function, osPriorityNormal, 0, 128);
 80001a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000218 <main+0x98>)
 80001a4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80001a8:	461d      	mov	r5, r3
 80001aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_1Handle = osThreadCreate(osThread(task_1), NULL);
 80001b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001ba:	2100      	movs	r1, #0
 80001bc:	4618      	mov	r0, r3
 80001be:	f004 f859 	bl	8004274 <osThreadCreate>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a15      	ldr	r2, [pc, #84]	@ (800021c <main+0x9c>)
 80001c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_2 */
  osThreadDef(task_2, task_2_function, osPriorityNormal, 0, 128);
 80001c8:	4b15      	ldr	r3, [pc, #84]	@ (8000220 <main+0xa0>)
 80001ca:	f107 0420 	add.w	r4, r7, #32
 80001ce:	461d      	mov	r5, r3
 80001d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_2Handle = osThreadCreate(osThread(task_2), NULL);
 80001dc:	f107 0320 	add.w	r3, r7, #32
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f004 f846 	bl	8004274 <osThreadCreate>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000224 <main+0xa4>)
 80001ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_3 */
  osThreadDef(task_3, task_3_function, osPriorityBelowNormal, 0, 128);
 80001ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000228 <main+0xa8>)
 80001f0:	1d3c      	adds	r4, r7, #4
 80001f2:	461d      	mov	r5, r3
 80001f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_3Handle = osThreadCreate(osThread(task_3), NULL);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2100      	movs	r1, #0
 8000204:	4618      	mov	r0, r3
 8000206:	f004 f835 	bl	8004274 <osThreadCreate>
 800020a:	4603      	mov	r3, r0
 800020c:	4a07      	ldr	r2, [pc, #28]	@ (800022c <main+0xac>)
 800020e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000210:	f004 f829 	bl	8004266 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000214:	bf00      	nop
 8000216:	e7fd      	b.n	8000214 <main+0x94>
 8000218:	08005858 	.word	0x08005858
 800021c:	20000420 	.word	0x20000420
 8000220:	0800587c 	.word	0x0800587c
 8000224:	20000424 	.word	0x20000424
 8000228:	080058a0 	.word	0x080058a0
 800022c:	20000428 	.word	0x20000428

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b094      	sub	sp, #80	@ 0x50
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f005 fa22 	bl	8005688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000280:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fdc8 	bl	8002e1c <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f001 f831 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 f834 	bl	8003320 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002be:	f001 f81b 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c2:	2302      	movs	r3, #2
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f9e4 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002da:	f001 f80d 	bl	80012f8 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3750      	adds	r7, #80	@ 0x50
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <MX_ADC1_Init+0x74>)
 80002fa:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <MX_ADC1_Init+0x78>)
 80002fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b17      	ldr	r3, [pc, #92]	@ (800035c <MX_ADC1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <MX_ADC1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030a:	4b14      	ldr	r3, [pc, #80]	@ (800035c <MX_ADC1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <MX_ADC1_Init+0x74>)
 8000312:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000316:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <MX_ADC1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800031e:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_ADC1_Init+0x74>)
 8000320:	2201      	movs	r2, #1
 8000322:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <MX_ADC1_Init+0x74>)
 8000326:	f001 fa09 	bl	800173c <HAL_ADC_Init>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000330:	f000 ffe2 	bl	80012f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000334:	2306      	movs	r3, #6
 8000336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000338:	2301      	movs	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_ADC1_Init+0x74>)
 8000346:	f001 fcbd 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000350:	f000 ffd2 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000324 	.word	0x20000324
 8000360:	40012400 	.word	0x40012400

08000364 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000374:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_ADC2_Init+0x74>)
 8000376:	4a19      	ldr	r2, [pc, #100]	@ (80003dc <MX_ADC2_Init+0x78>)
 8000378:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <MX_ADC2_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <MX_ADC2_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_ADC2_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <MX_ADC2_Init+0x74>)
 800038e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000392:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <MX_ADC2_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_ADC2_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <MX_ADC2_Init+0x74>)
 80003a2:	f001 f9cb 	bl	800173c <HAL_ADC_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003ac:	f000 ffa4 	bl	80012f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003b0:	2307      	movs	r3, #7
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4619      	mov	r1, r3
 80003c0:	4805      	ldr	r0, [pc, #20]	@ (80003d8 <MX_ADC2_Init+0x74>)
 80003c2:	f001 fc7f 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003cc:	f000 ff94 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000354 	.word	0x20000354
 80003dc:	40012800 	.word	0x40012800

080003e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <MX_I2C1_Init+0x50>)
 80003e6:	4a13      	ldr	r2, [pc, #76]	@ (8000434 <MX_I2C1_Init+0x54>)
 80003e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_I2C1_Init+0x50>)
 80003ec:	4a12      	ldr	r2, [pc, #72]	@ (8000438 <MX_I2C1_Init+0x58>)
 80003ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <MX_I2C1_Init+0x50>)
 80003fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000404:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <MX_I2C1_Init+0x50>)
 8000406:	2200      	movs	r2, #0
 8000408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <MX_I2C1_Init+0x50>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000410:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <MX_I2C1_Init+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_I2C1_Init+0x50>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800041c:	4804      	ldr	r0, [pc, #16]	@ (8000430 <MX_I2C1_Init+0x50>)
 800041e:	f002 f861 	bl	80024e4 <HAL_I2C_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000428:	f000 ff66 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000384 	.word	0x20000384
 8000434:	40005400 	.word	0x40005400
 8000438:	000186a0 	.word	0x000186a0

0800043c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000440:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000442:	4a12      	ldr	r2, [pc, #72]	@ (800048c <MX_USART1_UART_Init+0x50>)
 8000444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800044c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b09      	ldr	r3, [pc, #36]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000472:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_USART1_UART_Init+0x4c>)
 8000474:	f003 fcbc 	bl	8003df0 <HAL_UART_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800047e:	f000 ff3b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200003d8 	.word	0x200003d8
 800048c:	40013800 	.word	0x40013800

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a18      	ldr	r2, [pc, #96]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0320 	and.w	r3, r3, #32
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a12      	ldr	r2, [pc, #72]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_GPIO_Init+0x7c>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ec:	2320      	movs	r3, #32
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4804      	ldr	r0, [pc, #16]	@ (8000510 <MX_GPIO_Init+0x80>)
 8000500:	f001 fe54 	bl	80021ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800

08000514 <lcd_command>:

/* USER CODE BEGIN 4 */
void lcd_command(uint8_t cmd)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	buff[0] = (0 << LCD_RS) | (0 << LCD_RW) | (1 << LCD_EN) | (cmd & 0xF0) | 0x08;
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	f023 030f 	bic.w	r3, r3, #15
 8000526:	b25b      	sxtb	r3, r3
 8000528:	f043 030c 	orr.w	r3, r3, #12
 800052c:	b25b      	sxtb	r3, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	733b      	strb	r3, [r7, #12]
	buff[1] = (0 << LCD_RS) | (0 << LCD_RW) | (0 << LCD_EN) | (cmd & 0xF0) | 0x08;
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	f023 030f 	bic.w	r3, r3, #15
 800053a:	b25b      	sxtb	r3, r3
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b25b      	sxtb	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	737b      	strb	r3, [r7, #13]
	buff[2] = (0 << LCD_RS) | (0 << LCD_RW) | (1 << LCD_EN) | (cmd << 4) | 0x08;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	b25b      	sxtb	r3, r3
 800054c:	f043 030c 	orr.w	r3, r3, #12
 8000550:	b25b      	sxtb	r3, r3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	73bb      	strb	r3, [r7, #14]
	buff[3] = (0 << LCD_RS) | (0 << LCD_RW) | (0 << LCD_EN) | (cmd << 4) | 0x08;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	b25b      	sxtb	r3, r3
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, buff, 4, 100);
 8000566:	f107 020c 	add.w	r2, r7, #12
 800056a:	2364      	movs	r3, #100	@ 0x64
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2304      	movs	r3, #4
 8000570:	214e      	movs	r1, #78	@ 0x4e
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <lcd_command+0x74>)
 8000574:	f002 f8fa 	bl	800276c <HAL_I2C_Master_Transmit>
	osDelay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f003 fec7 	bl	800430c <osDelay>
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000384 	.word	0x20000384

0800058c <lcd_data>:

void lcd_data(uint8_t data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af02      	add	r7, sp, #8
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	uint8_t buff[4];
	buff[0] = (1 << LCD_RS) | (0 << LCD_RW) | (1 << LCD_EN) | (data & 0xF0) | 0x08;
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	f023 030f 	bic.w	r3, r3, #15
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	f043 030d 	orr.w	r3, r3, #13
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	733b      	strb	r3, [r7, #12]
	buff[1] = (1 << LCD_RS) | (0 << LCD_RW) | (0 << LCD_EN) | (data & 0xF0) | 0x08;
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	f023 030f 	bic.w	r3, r3, #15
 80005b2:	b25b      	sxtb	r3, r3
 80005b4:	f043 0309 	orr.w	r3, r3, #9
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	737b      	strb	r3, [r7, #13]
	buff[2] = (1 << LCD_RS) | (0 << LCD_RW) | (1 << LCD_EN) | (data << 4) | 0x08;
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	f043 030d 	orr.w	r3, r3, #13
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	73bb      	strb	r3, [r7, #14]
	buff[3] = (1 << LCD_RS) | (0 << LCD_RW) | (0 << LCD_EN) | (data << 4) | 0x08;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	f043 0309 	orr.w	r3, r3, #9
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDRESS, buff, 4, 100);
 80005de:	f107 020c 	add.w	r2, r7, #12
 80005e2:	2364      	movs	r3, #100	@ 0x64
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2304      	movs	r3, #4
 80005e8:	214e      	movs	r1, #78	@ 0x4e
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <lcd_data+0x74>)
 80005ec:	f002 f8be 	bl	800276c <HAL_I2C_Master_Transmit>
	osDelay(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f003 fe8b 	bl	800430c <osDelay>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000384 	.word	0x20000384

08000604 <lcd_init>:

void lcd_init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	osDelay(50);
 8000608:	2032      	movs	r0, #50	@ 0x32
 800060a:	f003 fe7f 	bl	800430c <osDelay>
	lcd_command(0x30);
 800060e:	2030      	movs	r0, #48	@ 0x30
 8000610:	f7ff ff80 	bl	8000514 <lcd_command>
	osDelay(5);
 8000614:	2005      	movs	r0, #5
 8000616:	f003 fe79 	bl	800430c <osDelay>
	lcd_command(0x30);
 800061a:	2030      	movs	r0, #48	@ 0x30
 800061c:	f7ff ff7a 	bl	8000514 <lcd_command>
	lcd_command(0x30);
 8000620:	2030      	movs	r0, #48	@ 0x30
 8000622:	f7ff ff77 	bl	8000514 <lcd_command>
	lcd_command(0x20);
 8000626:	2020      	movs	r0, #32
 8000628:	f7ff ff74 	bl	8000514 <lcd_command>

	lcd_command(0x28);
 800062c:	2028      	movs	r0, #40	@ 0x28
 800062e:	f7ff ff71 	bl	8000514 <lcd_command>
	lcd_command(0x01);
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ff6e 	bl	8000514 <lcd_command>
	osDelay(2);
 8000638:	2002      	movs	r0, #2
 800063a:	f003 fe67 	bl	800430c <osDelay>
	lcd_command(0x0E);
 800063e:	200e      	movs	r0, #14
 8000640:	f7ff ff68 	bl	8000514 <lcd_command>
	lcd_command(0x06);
 8000644:	2006      	movs	r0, #6
 8000646:	f7ff ff65 	bl	8000514 <lcd_command>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_string>:
	lcd_command(0x01);
	osDelay(2);
}

void lcd_string(char str[])
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
	while (str[i] != '\0')
 800065a:	e009      	b.n	8000670 <lcd_string+0x22>
	{
		lcd_data(str[i]);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff91 	bl	800058c <lcd_data>
		i++;
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	3301      	adds	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
	while (str[i] != '\0')
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1ef      	bne.n	800065c <lcd_string+0xe>
	}
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <check_moves_left>:

uint8_t check_moves_left(char board[][3])
{
 8000686:	b480      	push	{r7}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 3; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e017      	b.n	80006c4 <check_moves_left+0x3e>
    {
        for (uint8_t j = 0; j < 3; j++)
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	e00e      	b.n	80006b8 <check_moves_left+0x32>
        {
            if (board[i][j] == '_')
 800069a:	7bfa      	ldrb	r2, [r7, #15]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	441a      	add	r2, r3
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	2b5f      	cmp	r3, #95	@ 0x5f
 80006ac:	d101      	bne.n	80006b2 <check_moves_left+0x2c>
            {
                return 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00c      	b.n	80006cc <check_moves_left+0x46>
        for (uint8_t j = 0; j < 3; j++)
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	3301      	adds	r3, #1
 80006b6:	73bb      	strb	r3, [r7, #14]
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d9ed      	bls.n	800069a <check_moves_left+0x14>
    for (uint8_t i = 0; i < 3; i++)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d9e4      	bls.n	8000694 <check_moves_left+0xe>
            }
        }
    }
    return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <evaluate>:

int evaluate(char board[][3])
{
 80006d6:	b480      	push	{r7}
 80006d8:	b085      	sub	sp, #20
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
    // Check row
    for (uint8_t i = 0; i < 3; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
 80006e2:	e039      	b.n	8000758 <evaluate+0x82>
    {
        if ((board[i][0] == board[i][1]) && (board[i][0] == board[i][2]))
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	7819      	ldrb	r1, [r3, #0]
 80006f2:	7bfa      	ldrb	r2, [r7, #15]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	4299      	cmp	r1, r3
 8000702:	d126      	bne.n	8000752 <evaluate+0x7c>
 8000704:	7bfa      	ldrb	r2, [r7, #15]
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	7819      	ldrb	r1, [r3, #0]
 8000712:	7bfa      	ldrb	r2, [r7, #15]
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	4299      	cmp	r1, r3
 8000722:	d116      	bne.n	8000752 <evaluate+0x7c>
        {
            if (board[i][0] == computer)
 8000724:	7bfa      	ldrb	r2, [r7, #15]
 8000726:	4613      	mov	r3, r2
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4413      	add	r3, r2
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b6f      	cmp	r3, #111	@ 0x6f
 8000734:	d101      	bne.n	800073a <evaluate+0x64>
            {
                return 10;
 8000736:	230a      	movs	r3, #10
 8000738:	e072      	b.n	8000820 <evaluate+0x14a>
            }
            else if (board[i][0] == player)
 800073a:	7bfa      	ldrb	r2, [r7, #15]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b78      	cmp	r3, #120	@ 0x78
 800074a:	d102      	bne.n	8000752 <evaluate+0x7c>
            {
                return -10;
 800074c:	f06f 0309 	mvn.w	r3, #9
 8000750:	e066      	b.n	8000820 <evaluate+0x14a>
    for (uint8_t i = 0; i < 3; i++)
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	3301      	adds	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d9c2      	bls.n	80006e4 <evaluate+0xe>
            }
        }
    }

    // Check column
    for (uint8_t i = 0; i < 3; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	73bb      	strb	r3, [r7, #14]
 8000762:	e023      	b.n	80007ac <evaluate+0xd6>
    {
        if ((board[0][i] == board[1][i]) && (board[0][i] == board[2][i]))
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	5cd2      	ldrb	r2, [r2, r3]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1cd9      	adds	r1, r3, #3
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	5ccb      	ldrb	r3, [r1, r3]
 8000772:	429a      	cmp	r2, r3
 8000774:	d117      	bne.n	80007a6 <evaluate+0xd0>
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	5cd2      	ldrb	r2, [r2, r3]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	1d99      	adds	r1, r3, #6
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	5ccb      	ldrb	r3, [r1, r3]
 8000784:	429a      	cmp	r2, r3
 8000786:	d10e      	bne.n	80007a6 <evaluate+0xd0>
        {
            if (board[0][i] == computer)
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	2b6f      	cmp	r3, #111	@ 0x6f
 8000790:	d101      	bne.n	8000796 <evaluate+0xc0>
            {
                return 10;
 8000792:	230a      	movs	r3, #10
 8000794:	e044      	b.n	8000820 <evaluate+0x14a>
            }
            else if (board[0][i] == player)
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	5cd3      	ldrb	r3, [r2, r3]
 800079c:	2b78      	cmp	r3, #120	@ 0x78
 800079e:	d102      	bne.n	80007a6 <evaluate+0xd0>
            {
                return -10;
 80007a0:	f06f 0309 	mvn.w	r3, #9
 80007a4:	e03c      	b.n	8000820 <evaluate+0x14a>
    for (uint8_t i = 0; i < 3; i++)
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	3301      	adds	r3, #1
 80007aa:	73bb      	strb	r3, [r7, #14]
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d9d8      	bls.n	8000764 <evaluate+0x8e>
            }
        }
    }

    // Check diagonal
    if ((board[0][0] == board[1][1]) && (board[0][0] == board[2][2]))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3303      	adds	r3, #3
 80007ba:	785b      	ldrb	r3, [r3, #1]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d113      	bne.n	80007e8 <evaluate+0x112>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3306      	adds	r3, #6
 80007c8:	789b      	ldrb	r3, [r3, #2]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d10c      	bne.n	80007e8 <evaluate+0x112>
    {
        if (board[0][0] == computer)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b6f      	cmp	r3, #111	@ 0x6f
 80007d4:	d101      	bne.n	80007da <evaluate+0x104>
        {
            return 10;
 80007d6:	230a      	movs	r3, #10
 80007d8:	e022      	b.n	8000820 <evaluate+0x14a>
        }
        else if (board[0][0] == player)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b78      	cmp	r3, #120	@ 0x78
 80007e0:	d102      	bne.n	80007e8 <evaluate+0x112>
        {
            return -10;
 80007e2:	f06f 0309 	mvn.w	r3, #9
 80007e6:	e01b      	b.n	8000820 <evaluate+0x14a>
        }
    }

    if ((board[0][2] == board[1][1]) && (board[0][2] == board[2][0]))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	789a      	ldrb	r2, [r3, #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3303      	adds	r3, #3
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d113      	bne.n	800081e <evaluate+0x148>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	789a      	ldrb	r2, [r3, #2]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3306      	adds	r3, #6
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d10c      	bne.n	800081e <evaluate+0x148>
    {
        if (board[0][2] == computer)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	789b      	ldrb	r3, [r3, #2]
 8000808:	2b6f      	cmp	r3, #111	@ 0x6f
 800080a:	d101      	bne.n	8000810 <evaluate+0x13a>
        {
            return 10;
 800080c:	230a      	movs	r3, #10
 800080e:	e007      	b.n	8000820 <evaluate+0x14a>
        }
        else if (board[0][2] == player)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	2b78      	cmp	r3, #120	@ 0x78
 8000816:	d102      	bne.n	800081e <evaluate+0x148>
        {
            return -10;
 8000818:	f06f 0309 	mvn.w	r3, #9
 800081c:	e000      	b.n	8000820 <evaluate+0x14a>
        }
    }

    return 0;
 800081e:	2300      	movs	r3, #0
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <minimax>:

int minimax(char board[][3], uint8_t turn)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
    int score = evaluate(board);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff4c 	bl	80006d6 <evaluate>
 800083e:	60f8      	str	r0, [r7, #12]

    if ((score == 10) || (score == -10))
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b0a      	cmp	r3, #10
 8000844:	d003      	beq.n	800084e <minimax+0x22>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f113 0f0a 	cmn.w	r3, #10
 800084c:	d101      	bne.n	8000852 <minimax+0x26>
    {
        return score;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	e087      	b.n	8000962 <minimax+0x136>
    }

    if (!check_moves_left(board))
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff17 	bl	8000686 <check_moves_left>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d101      	bne.n	8000862 <minimax+0x36>
    {
        return 0;
 800085e:	2300      	movs	r3, #0
 8000860:	e07f      	b.n	8000962 <minimax+0x136>
    }

    if (turn == computer_turn)
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d13b      	bne.n	80008e0 <minimax+0xb4>
    {
        int best = -1000;
 8000868:	4b40      	ldr	r3, [pc, #256]	@ (800096c <minimax+0x140>)
 800086a:	61fb      	str	r3, [r7, #28]
        for (uint8_t i = 0; i < 3; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	76fb      	strb	r3, [r7, #27]
 8000870:	e031      	b.n	80008d6 <minimax+0xaa>
        {
            for (uint8_t j = 0; j < 3; j++)
 8000872:	2300      	movs	r3, #0
 8000874:	76bb      	strb	r3, [r7, #26]
 8000876:	e028      	b.n	80008ca <minimax+0x9e>
            {
                if (board[i][j] == '_')
 8000878:	7efa      	ldrb	r2, [r7, #27]
 800087a:	4613      	mov	r3, r2
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	4413      	add	r3, r2
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	441a      	add	r2, r3
 8000884:	7ebb      	ldrb	r3, [r7, #26]
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	2b5f      	cmp	r3, #95	@ 0x5f
 800088a:	d11b      	bne.n	80008c4 <minimax+0x98>
                {
                    board[i][j] = computer;
 800088c:	7efa      	ldrb	r2, [r7, #27]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	441a      	add	r2, r3
 8000898:	7ebb      	ldrb	r3, [r7, #26]
 800089a:	216f      	movs	r1, #111	@ 0x6f
 800089c:	54d1      	strb	r1, [r2, r3]
                    best = max(best, minimax(board, player_turn));
 800089e:	2100      	movs	r1, #0
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ffc3 	bl	800082c <minimax>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4619      	mov	r1, r3
 80008aa:	69f8      	ldr	r0, [r7, #28]
 80008ac:	f000 f8b6 	bl	8000a1c <max>
 80008b0:	61f8      	str	r0, [r7, #28]
                    board[i][j] = '_';
 80008b2:	7efa      	ldrb	r2, [r7, #27]
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	441a      	add	r2, r3
 80008be:	7ebb      	ldrb	r3, [r7, #26]
 80008c0:	215f      	movs	r1, #95	@ 0x5f
 80008c2:	54d1      	strb	r1, [r2, r3]
            for (uint8_t j = 0; j < 3; j++)
 80008c4:	7ebb      	ldrb	r3, [r7, #26]
 80008c6:	3301      	adds	r3, #1
 80008c8:	76bb      	strb	r3, [r7, #26]
 80008ca:	7ebb      	ldrb	r3, [r7, #26]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d9d3      	bls.n	8000878 <minimax+0x4c>
        for (uint8_t i = 0; i < 3; i++)
 80008d0:	7efb      	ldrb	r3, [r7, #27]
 80008d2:	3301      	adds	r3, #1
 80008d4:	76fb      	strb	r3, [r7, #27]
 80008d6:	7efb      	ldrb	r3, [r7, #27]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d9ca      	bls.n	8000872 <minimax+0x46>
                }
            }
        }
        return best;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	e040      	b.n	8000962 <minimax+0x136>
    }

    if (turn == player_turn)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d13c      	bne.n	8000960 <minimax+0x134>
    {
        int best = 1000;
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	617b      	str	r3, [r7, #20]
        for (uint8_t i = 0; i < 3; i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	74fb      	strb	r3, [r7, #19]
 80008f0:	e031      	b.n	8000956 <minimax+0x12a>
        {
            for (uint8_t j = 0; j < 3; j++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	74bb      	strb	r3, [r7, #18]
 80008f6:	e028      	b.n	800094a <minimax+0x11e>
            {
                if (board[i][j] == '_')
 80008f8:	7cfa      	ldrb	r2, [r7, #19]
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	441a      	add	r2, r3
 8000904:	7cbb      	ldrb	r3, [r7, #18]
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	2b5f      	cmp	r3, #95	@ 0x5f
 800090a:	d11b      	bne.n	8000944 <minimax+0x118>
                {
                    board[i][j] = player;
 800090c:	7cfa      	ldrb	r2, [r7, #19]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	441a      	add	r2, r3
 8000918:	7cbb      	ldrb	r3, [r7, #18]
 800091a:	2178      	movs	r1, #120	@ 0x78
 800091c:	54d1      	strb	r1, [r2, r3]
                    best = min(best, minimax(board, computer_turn));
 800091e:	2101      	movs	r1, #1
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff83 	bl	800082c <minimax>
 8000926:	4603      	mov	r3, r0
 8000928:	4619      	mov	r1, r3
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f000 f887 	bl	8000a3e <min>
 8000930:	6178      	str	r0, [r7, #20]
                    board[i][j] = '_';
 8000932:	7cfa      	ldrb	r2, [r7, #19]
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	441a      	add	r2, r3
 800093e:	7cbb      	ldrb	r3, [r7, #18]
 8000940:	215f      	movs	r1, #95	@ 0x5f
 8000942:	54d1      	strb	r1, [r2, r3]
            for (uint8_t j = 0; j < 3; j++)
 8000944:	7cbb      	ldrb	r3, [r7, #18]
 8000946:	3301      	adds	r3, #1
 8000948:	74bb      	strb	r3, [r7, #18]
 800094a:	7cbb      	ldrb	r3, [r7, #18]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d9d3      	bls.n	80008f8 <minimax+0xcc>
        for (uint8_t i = 0; i < 3; i++)
 8000950:	7cfb      	ldrb	r3, [r7, #19]
 8000952:	3301      	adds	r3, #1
 8000954:	74fb      	strb	r3, [r7, #19]
 8000956:	7cfb      	ldrb	r3, [r7, #19]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d9ca      	bls.n	80008f2 <minimax+0xc6>
                }
            }
        }
        return best;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	e000      	b.n	8000962 <minimax+0x136>
    }

    return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	fffffc18 	.word	0xfffffc18

08000970 <find_best_move>:

void find_best_move(char board[][3])
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    int best = -1000;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <find_best_move+0xa4>)
 800097a:	617b      	str	r3, [r7, #20]
    best_move.column = -1;
 800097c:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <find_best_move+0xa8>)
 800097e:	f04f 32ff 	mov.w	r2, #4294967295
 8000982:	601a      	str	r2, [r3, #0]
    best_move.row = -1;
 8000984:	4b24      	ldr	r3, [pc, #144]	@ (8000a18 <find_best_move+0xa8>)
 8000986:	f04f 32ff 	mov.w	r2, #4294967295
 800098a:	605a      	str	r2, [r3, #4]

    for (uint8_t i = 0; i < 3; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	74fb      	strb	r3, [r7, #19]
 8000990:	e038      	b.n	8000a04 <find_best_move+0x94>
    {
        for (uint8_t j = 0; j < 3; j++)
 8000992:	2300      	movs	r3, #0
 8000994:	74bb      	strb	r3, [r7, #18]
 8000996:	e02f      	b.n	80009f8 <find_best_move+0x88>
        {
            if (board[i][j] == '_')
 8000998:	7cfa      	ldrb	r2, [r7, #19]
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	441a      	add	r2, r3
 80009a4:	7cbb      	ldrb	r3, [r7, #18]
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80009aa:	d122      	bne.n	80009f2 <find_best_move+0x82>
            {
                board[i][j] = computer;
 80009ac:	7cfa      	ldrb	r2, [r7, #19]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	441a      	add	r2, r3
 80009b8:	7cbb      	ldrb	r3, [r7, #18]
 80009ba:	216f      	movs	r1, #111	@ 0x6f
 80009bc:	54d1      	strb	r1, [r2, r3]
                int val = minimax(board, player_turn);
 80009be:	2100      	movs	r1, #0
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff33 	bl	800082c <minimax>
 80009c6:	60f8      	str	r0, [r7, #12]
                board[i][j] = '_';
 80009c8:	7cfa      	ldrb	r2, [r7, #19]
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	441a      	add	r2, r3
 80009d4:	7cbb      	ldrb	r3, [r7, #18]
 80009d6:	215f      	movs	r1, #95	@ 0x5f
 80009d8:	54d1      	strb	r1, [r2, r3]
                if (val > best)
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	429a      	cmp	r2, r3
 80009e0:	dd07      	ble.n	80009f2 <find_best_move+0x82>
                {
                    best_move.row = i;
 80009e2:	7cfb      	ldrb	r3, [r7, #19]
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <find_best_move+0xa8>)
 80009e6:	6053      	str	r3, [r2, #4]
                    best_move.column = j;
 80009e8:	7cbb      	ldrb	r3, [r7, #18]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <find_best_move+0xa8>)
 80009ec:	6013      	str	r3, [r2, #0]
                    best = val;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 3; j++)
 80009f2:	7cbb      	ldrb	r3, [r7, #18]
 80009f4:	3301      	adds	r3, #1
 80009f6:	74bb      	strb	r3, [r7, #18]
 80009f8:	7cbb      	ldrb	r3, [r7, #18]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d9cc      	bls.n	8000998 <find_best_move+0x28>
    for (uint8_t i = 0; i < 3; i++)
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	3301      	adds	r3, #1
 8000a02:	74fb      	strb	r3, [r7, #19]
 8000a04:	7cfb      	ldrb	r3, [r7, #19]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d9c3      	bls.n	8000992 <find_best_move+0x22>
                }
            }
        }
    }
}
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	fffffc18 	.word	0xfffffc18
 8000a18:	20000000 	.word	0x20000000

08000a1c <max>:

int max(int a, int b)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    if (a > b)
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dd01      	ble.n	8000a32 <max+0x16>
    {
        return a;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	e000      	b.n	8000a34 <max+0x18>
    }
    else
    {
        return b;
 8000a32:	683b      	ldr	r3, [r7, #0]
    }
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <min>:

int min(int a, int b)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
    if (a < b)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	da01      	bge.n	8000a54 <min+0x16>
    {
        return a;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	e000      	b.n	8000a56 <min+0x18>
    }
    else
    {
        return b;
 8000a54:	683b      	ldr	r3, [r7, #0]
    }
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <board_clear>:

void board_clear(char board[][3])
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 3; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e014      	b.n	8000a98 <board_clear+0x38>
    {
        for (uint8_t j = 0; j < 3; j++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73bb      	strb	r3, [r7, #14]
 8000a72:	e00b      	b.n	8000a8c <board_clear+0x2c>
        {
            board[i][j] = '_';
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	441a      	add	r2, r3
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	215f      	movs	r1, #95	@ 0x5f
 8000a84:	54d1      	strb	r1, [r2, r3]
        for (uint8_t j = 0; j < 3; j++)
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73bb      	strb	r3, [r7, #14]
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d9f0      	bls.n	8000a74 <board_clear+0x14>
    for (uint8_t i = 0; i < 3; i++)
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	3301      	adds	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d9e7      	bls.n	8000a6e <board_clear+0xe>
        }
    }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <board_copy>:

void board_copy(char board[][3], char copy[])
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 3; i++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73bb      	strb	r3, [r7, #14]
 8000abc:	e01a      	b.n	8000af4 <board_copy+0x4a>
    {
        for (uint8_t j = 0; j < 3; j++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	737b      	strb	r3, [r7, #13]
 8000ac2:	e011      	b.n	8000ae8 <board_copy+0x3e>
        {
            copy[n] = board[i][j];
 8000ac4:	7bba      	ldrb	r2, [r7, #14]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	18d1      	adds	r1, r2, r3
 8000ad0:	7b7a      	ldrb	r2, [r7, #13]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	4403      	add	r3, r0
 8000ad8:	5c8a      	ldrb	r2, [r1, r2]
 8000ada:	701a      	strb	r2, [r3, #0]
            n++;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 3; j++)
 8000ae2:	7b7b      	ldrb	r3, [r7, #13]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	737b      	strb	r3, [r7, #13]
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d9ea      	bls.n	8000ac4 <board_copy+0x1a>
    for (uint8_t i = 0; i < 3; i++)
 8000aee:	7bbb      	ldrb	r3, [r7, #14]
 8000af0:	3301      	adds	r3, #1
 8000af2:	73bb      	strb	r3, [r7, #14]
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d9e1      	bls.n	8000abe <board_copy+0x14>
        }
    }
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <board_to_pc>:

void board_to_pc(char board[][3], move_typedef *cursor)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
	char buff[11];
	buff[10] = '\n';
 8000b12:	230a      	movs	r3, #10
 8000b14:	75bb      	strb	r3, [r7, #22]
	board_copy(board, buff);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffc4 	bl	8000aaa <board_copy>
	buff[9] = cursor->row * 3 + cursor->column + '0';
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	0052      	lsls	r2, r2, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4413      	add	r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	3330      	adds	r3, #48	@ 0x30
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	757b      	strb	r3, [r7, #21]
	HAL_UART_Transmit(&huart1, buff, sizeof(buff), 100);
 8000b40:	f107 010c 	add.w	r1, r7, #12
 8000b44:	2364      	movs	r3, #100	@ 0x64
 8000b46:	220b      	movs	r2, #11
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <board_to_pc+0x50>)
 8000b4a:	f003 f9a1 	bl	8003e90 <HAL_UART_Transmit>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200003d8 	.word	0x200003d8

08000b5c <board_easy_mode>:

void board_easy_mode(char board[][3], uint8_t rand)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
	if (rand % 2)
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d026      	beq.n	8000bc2 <board_easy_mode+0x66>
	{
		for (uint8_t i = 0; i < 3; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]
 8000b78:	e01f      	b.n	8000bba <board_easy_mode+0x5e>
		{
			for (uint8_t j = 0; j < 3; j++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
 8000b7e:	e016      	b.n	8000bae <board_easy_mode+0x52>
			{
				if (board[i][j] == '_')
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	441a      	add	r2, r3
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b92:	d109      	bne.n	8000ba8 <board_easy_mode+0x4c>
				{
					board[i][j] = computer;
 8000b94:	7bfa      	ldrb	r2, [r7, #15]
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	441a      	add	r2, r3
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	216f      	movs	r1, #111	@ 0x6f
 8000ba4:	54d1      	strb	r1, [r2, r3]
					return;
 8000ba6:	e032      	b.n	8000c0e <board_easy_mode+0xb2>
			for (uint8_t j = 0; j < 3; j++)
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d9e5      	bls.n	8000b80 <board_easy_mode+0x24>
		for (uint8_t i = 0; i < 3; i++)
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d9dc      	bls.n	8000b7a <board_easy_mode+0x1e>
 8000bc0:	e025      	b.n	8000c0e <board_easy_mode+0xb2>
			}
		}
	}
	else
	{
		for (uint8_t j = 0; j < 3; j++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	737b      	strb	r3, [r7, #13]
 8000bc6:	e01f      	b.n	8000c08 <board_easy_mode+0xac>
		{
			for (uint8_t i = 0; i < 3; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	733b      	strb	r3, [r7, #12]
 8000bcc:	e016      	b.n	8000bfc <board_easy_mode+0xa0>
			{
				if (board[i][j] == '_')
 8000bce:	7b3a      	ldrb	r2, [r7, #12]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	441a      	add	r2, r3
 8000bda:	7b7b      	ldrb	r3, [r7, #13]
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	2b5f      	cmp	r3, #95	@ 0x5f
 8000be0:	d109      	bne.n	8000bf6 <board_easy_mode+0x9a>
				{
					board[i][j] = computer;
 8000be2:	7b3a      	ldrb	r2, [r7, #12]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	441a      	add	r2, r3
 8000bee:	7b7b      	ldrb	r3, [r7, #13]
 8000bf0:	216f      	movs	r1, #111	@ 0x6f
 8000bf2:	54d1      	strb	r1, [r2, r3]
					return;
 8000bf4:	e00b      	b.n	8000c0e <board_easy_mode+0xb2>
			for (uint8_t i = 0; i < 3; i++)
 8000bf6:	7b3b      	ldrb	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	733b      	strb	r3, [r7, #12]
 8000bfc:	7b3b      	ldrb	r3, [r7, #12]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d9e5      	bls.n	8000bce <board_easy_mode+0x72>
		for (uint8_t j = 0; j < 3; j++)
 8000c02:	7b7b      	ldrb	r3, [r7, #13]
 8000c04:	3301      	adds	r3, #1
 8000c06:	737b      	strb	r3, [r7, #13]
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d9dc      	bls.n	8000bc8 <board_easy_mode+0x6c>
				}
			}
		}
	}
}
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <task_1_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_1_function */
void task_1_function(void const * argument)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	rand++;
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <task_1_function+0x28>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <task_1_function+0x28>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	board_to_pc(board, &cursor);
 8000c2e:	4905      	ldr	r1, [pc, #20]	@ (8000c44 <task_1_function+0x2c>)
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <task_1_function+0x30>)
 8000c32:	f7ff ff69 	bl	8000b08 <board_to_pc>
    osDelay(100);
 8000c36:	2064      	movs	r0, #100	@ 0x64
 8000c38:	f003 fb68 	bl	800430c <osDelay>
	rand++;
 8000c3c:	bf00      	nop
 8000c3e:	e7ef      	b.n	8000c20 <task_1_function+0x8>
 8000c40:	20000445 	.word	0x20000445
 8000c44:	20000438 	.word	0x20000438
 8000c48:	2000042c 	.word	0x2000042c

08000c4c <task_2_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_2_function */
void task_2_function(void const * argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_2_function */
  lcd_init();
 8000c54:	f7ff fcd6 	bl	8000604 <lcd_init>
  /* Infinite loop */
  for(;;)
  {
	switch(cur_state)
 8000c58:	4b51      	ldr	r3, [pc, #324]	@ (8000da0 <task_2_function+0x154>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	f200 809a 	bhi.w	8000d98 <task_2_function+0x14c>
 8000c64:	a201      	add	r2, pc, #4	@ (adr r2, 8000c6c <task_2_function+0x20>)
 8000c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6a:	bf00      	nop
 8000c6c:	08000c81 	.word	0x08000c81
 8000c70:	08000cb9 	.word	0x08000cb9
 8000c74:	08000cf1 	.word	0x08000cf1
 8000c78:	08000d11 	.word	0x08000d11
 8000c7c:	08000d43 	.word	0x08000d43
	{
	case MENU_CHOOSE_MODE:
		lcd_command(0x0E);
 8000c80:	200e      	movs	r0, #14
 8000c82:	f7ff fc47 	bl	8000514 <lcd_command>
		lcd_command(0x80);
 8000c86:	2080      	movs	r0, #128	@ 0x80
 8000c88:	f7ff fc44 	bl	8000514 <lcd_command>
		lcd_string("Choose a mode:  ");
 8000c8c:	4845      	ldr	r0, [pc, #276]	@ (8000da4 <task_2_function+0x158>)
 8000c8e:	f7ff fcde 	bl	800064e <lcd_string>
		lcd_command(0xC0);
 8000c92:	20c0      	movs	r0, #192	@ 0xc0
 8000c94:	f7ff fc3e 	bl	8000514 <lcd_command>
		lcd_string("1:1P 2:2P       ");
 8000c98:	4843      	ldr	r0, [pc, #268]	@ (8000da8 <task_2_function+0x15c>)
 8000c9a:	f7ff fcd8 	bl	800064e <lcd_string>
		if (lcd_cursor == POS_1)
 8000c9e:	4b43      	ldr	r3, [pc, #268]	@ (8000dac <task_2_function+0x160>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <task_2_function+0x64>
		{
			lcd_command(0xC0);
 8000ca8:	20c0      	movs	r0, #192	@ 0xc0
 8000caa:	f7ff fc33 	bl	8000514 <lcd_command>
		}
		else
		{
			lcd_command(0xC5);
		}
		break;
 8000cae:	e073      	b.n	8000d98 <task_2_function+0x14c>
			lcd_command(0xC5);
 8000cb0:	20c5      	movs	r0, #197	@ 0xc5
 8000cb2:	f7ff fc2f 	bl	8000514 <lcd_command>
		break;
 8000cb6:	e06f      	b.n	8000d98 <task_2_function+0x14c>
	case MENU_CHOOSE_DIFF:
		lcd_command(0x0E);
 8000cb8:	200e      	movs	r0, #14
 8000cba:	f7ff fc2b 	bl	8000514 <lcd_command>
		lcd_command(0x80);
 8000cbe:	2080      	movs	r0, #128	@ 0x80
 8000cc0:	f7ff fc28 	bl	8000514 <lcd_command>
		lcd_string("Difficulty:     ");
 8000cc4:	483a      	ldr	r0, [pc, #232]	@ (8000db0 <task_2_function+0x164>)
 8000cc6:	f7ff fcc2 	bl	800064e <lcd_string>
		lcd_command(0xC0);
 8000cca:	20c0      	movs	r0, #192	@ 0xc0
 8000ccc:	f7ff fc22 	bl	8000514 <lcd_command>
		lcd_string("1:Easy 2:Hard   ");
 8000cd0:	4838      	ldr	r0, [pc, #224]	@ (8000db4 <task_2_function+0x168>)
 8000cd2:	f7ff fcbc 	bl	800064e <lcd_string>
		if (lcd_cursor == POS_1)
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <task_2_function+0x160>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d103      	bne.n	8000ce8 <task_2_function+0x9c>
		{
			lcd_command(0xC0);
 8000ce0:	20c0      	movs	r0, #192	@ 0xc0
 8000ce2:	f7ff fc17 	bl	8000514 <lcd_command>
		}
		else
		{
			lcd_command(0xC7);
		}
		break;
 8000ce6:	e057      	b.n	8000d98 <task_2_function+0x14c>
			lcd_command(0xC7);
 8000ce8:	20c7      	movs	r0, #199	@ 0xc7
 8000cea:	f7ff fc13 	bl	8000514 <lcd_command>
		break;
 8000cee:	e053      	b.n	8000d98 <task_2_function+0x14c>
	case PLAYER_AI:
		lcd_command(0x0C);
 8000cf0:	200c      	movs	r0, #12
 8000cf2:	f7ff fc0f 	bl	8000514 <lcd_command>
		lcd_command(0x80);
 8000cf6:	2080      	movs	r0, #128	@ 0x80
 8000cf8:	f7ff fc0c 	bl	8000514 <lcd_command>
		lcd_string("     Playing    ");
 8000cfc:	482e      	ldr	r0, [pc, #184]	@ (8000db8 <task_2_function+0x16c>)
 8000cfe:	f7ff fca6 	bl	800064e <lcd_string>
		lcd_command(0xC0);
 8000d02:	20c0      	movs	r0, #192	@ 0xc0
 8000d04:	f7ff fc06 	bl	8000514 <lcd_command>
		lcd_string("  against AI... ");
 8000d08:	482c      	ldr	r0, [pc, #176]	@ (8000dbc <task_2_function+0x170>)
 8000d0a:	f7ff fca0 	bl	800064e <lcd_string>
		break;
 8000d0e:	e043      	b.n	8000d98 <task_2_function+0x14c>
	case PLAYER_PLAYER:
		lcd_command(0x0C);
 8000d10:	200c      	movs	r0, #12
 8000d12:	f7ff fbff 	bl	8000514 <lcd_command>
		lcd_command(0x80);
 8000d16:	2080      	movs	r0, #128	@ 0x80
 8000d18:	f7ff fbfc 	bl	8000514 <lcd_command>
		lcd_string("Waiting for     ");
 8000d1c:	4828      	ldr	r0, [pc, #160]	@ (8000dc0 <task_2_function+0x174>)
 8000d1e:	f7ff fc96 	bl	800064e <lcd_string>
		lcd_command(0xC0);
 8000d22:	20c0      	movs	r0, #192	@ 0xc0
 8000d24:	f7ff fbf6 	bl	8000514 <lcd_command>
		if (turn == PLAYER_1)
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <task_2_function+0x178>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <task_2_function+0xee>
		{
			lcd_string("Player 1...     ");
 8000d32:	4825      	ldr	r0, [pc, #148]	@ (8000dc8 <task_2_function+0x17c>)
 8000d34:	f7ff fc8b 	bl	800064e <lcd_string>
		}
		else
		{
			lcd_string("Player 2...     ");
		}
		break;
 8000d38:	e02e      	b.n	8000d98 <task_2_function+0x14c>
			lcd_string("Player 2...     ");
 8000d3a:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <task_2_function+0x180>)
 8000d3c:	f7ff fc87 	bl	800064e <lcd_string>
		break;
 8000d40:	e02a      	b.n	8000d98 <task_2_function+0x14c>
	case GAME_OVER:
		lcd_command(0x0C);
 8000d42:	200c      	movs	r0, #12
 8000d44:	f7ff fbe6 	bl	8000514 <lcd_command>
		lcd_command(0x80);
 8000d48:	2080      	movs	r0, #128	@ 0x80
 8000d4a:	f7ff fbe3 	bl	8000514 <lcd_command>
		if (winner == PLAYER_1_WON)
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <task_2_function+0x184>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <task_2_function+0x114>
		{
			lcd_string("    Player 1    ");
 8000d58:	481e      	ldr	r0, [pc, #120]	@ (8000dd4 <task_2_function+0x188>)
 8000d5a:	f7ff fc78 	bl	800064e <lcd_string>
 8000d5e:	e014      	b.n	8000d8a <task_2_function+0x13e>
		}
		else if (winner == PLAYER_2_WON)
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <task_2_function+0x184>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d103      	bne.n	8000d72 <task_2_function+0x126>
		{
			lcd_string("    Player 2    ");
 8000d6a:	481b      	ldr	r0, [pc, #108]	@ (8000dd8 <task_2_function+0x18c>)
 8000d6c:	f7ff fc6f 	bl	800064e <lcd_string>
 8000d70:	e00b      	b.n	8000d8a <task_2_function+0x13e>
		}
		else if (winner == AI_WON)
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <task_2_function+0x184>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d103      	bne.n	8000d84 <task_2_function+0x138>
		{
			lcd_string("       AI       ");
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <task_2_function+0x190>)
 8000d7e:	f7ff fc66 	bl	800064e <lcd_string>
 8000d82:	e002      	b.n	8000d8a <task_2_function+0x13e>
		}
		else
		{
			lcd_string("     No one     ");
 8000d84:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <task_2_function+0x194>)
 8000d86:	f7ff fc62 	bl	800064e <lcd_string>
		}
		lcd_command(0xC0);
 8000d8a:	20c0      	movs	r0, #192	@ 0xc0
 8000d8c:	f7ff fbc2 	bl	8000514 <lcd_command>
		lcd_string("    has won     ");
 8000d90:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <task_2_function+0x198>)
 8000d92:	f7ff fc5c 	bl	800064e <lcd_string>
		break;
 8000d96:	bf00      	nop

	}
    osDelay(100);
 8000d98:	2064      	movs	r0, #100	@ 0x64
 8000d9a:	f003 fab7 	bl	800430c <osDelay>
	switch(cur_state)
 8000d9e:	e75b      	b.n	8000c58 <task_2_function+0xc>
 8000da0:	20000441 	.word	0x20000441
 8000da4:	080058bc 	.word	0x080058bc
 8000da8:	080058d0 	.word	0x080058d0
 8000dac:	20000440 	.word	0x20000440
 8000db0:	080058e4 	.word	0x080058e4
 8000db4:	080058f8 	.word	0x080058f8
 8000db8:	0800590c 	.word	0x0800590c
 8000dbc:	08005920 	.word	0x08005920
 8000dc0:	08005934 	.word	0x08005934
 8000dc4:	20000442 	.word	0x20000442
 8000dc8:	08005948 	.word	0x08005948
 8000dcc:	0800595c 	.word	0x0800595c
 8000dd0:	20000444 	.word	0x20000444
 8000dd4:	08005970 	.word	0x08005970
 8000dd8:	08005984 	.word	0x08005984
 8000ddc:	08005998 	.word	0x08005998
 8000de0:	080059ac 	.word	0x080059ac
 8000de4:	080059c0 	.word	0x080059c0

08000de8 <task_3_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_3_function */
void task_3_function(void const * argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_3_function */
  /* Infinite loop */
  board_clear(board);
 8000df0:	48ad      	ldr	r0, [pc, #692]	@ (80010a8 <task_3_function+0x2c0>)
 8000df2:	f7ff fe35 	bl	8000a60 <board_clear>
  uint8_t button, button_2, button_3;
  uint16_t adc_1_val = 0, adc_2_val = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	827b      	strh	r3, [r7, #18]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	823b      	strh	r3, [r7, #16]
  button_state_typedef button_state = RELEASED;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	75fb      	strb	r3, [r7, #23]
//  button_state_typedef button_2_state = RELEASED;
//  button_state_typedef button_3_state = RELEASED;
  adc_state_typedef adc_1_state = ZERO;
 8000e02:	2300      	movs	r3, #0
 8000e04:	75bb      	strb	r3, [r7, #22]
  adc_state_typedef adc_2_state = ZERO;
 8000e06:	2300      	movs	r3, #0
 8000e08:	757b      	strb	r3, [r7, #21]
  for(;;)
  {
	// GPIO5
	button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	48a7      	ldr	r0, [pc, #668]	@ (80010ac <task_3_function+0x2c4>)
 8000e0e:	f001 fb51 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]
//	button_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
//	button_3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
	// ADC1
	HAL_ADC_Start(&hadc1);
 8000e16:	48a6      	ldr	r0, [pc, #664]	@ (80010b0 <task_3_function+0x2c8>)
 8000e18:	f000 fd68 	bl	80018ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8000e1c:	2164      	movs	r1, #100	@ 0x64
 8000e1e:	48a4      	ldr	r0, [pc, #656]	@ (80010b0 <task_3_function+0x2c8>)
 8000e20:	f000 fe3e 	bl	8001aa0 <HAL_ADC_PollForConversion>
	adc_1_val = HAL_ADC_GetValue(&hadc1);
 8000e24:	48a2      	ldr	r0, [pc, #648]	@ (80010b0 <task_3_function+0x2c8>)
 8000e26:	f000 ff41 	bl	8001cac <HAL_ADC_GetValue>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 8000e2e:	48a0      	ldr	r0, [pc, #640]	@ (80010b0 <task_3_function+0x2c8>)
 8000e30:	f000 fe0a 	bl	8001a48 <HAL_ADC_Stop>
	// ADC2
	HAL_ADC_Start(&hadc2);
 8000e34:	489f      	ldr	r0, [pc, #636]	@ (80010b4 <task_3_function+0x2cc>)
 8000e36:	f000 fd59 	bl	80018ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8000e3a:	2164      	movs	r1, #100	@ 0x64
 8000e3c:	489d      	ldr	r0, [pc, #628]	@ (80010b4 <task_3_function+0x2cc>)
 8000e3e:	f000 fe2f 	bl	8001aa0 <HAL_ADC_PollForConversion>
	adc_2_val = HAL_ADC_GetValue(&hadc2);
 8000e42:	489c      	ldr	r0, [pc, #624]	@ (80010b4 <task_3_function+0x2cc>)
 8000e44:	f000 ff32 	bl	8001cac <HAL_ADC_GetValue>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	823b      	strh	r3, [r7, #16]
	HAL_ADC_Stop(&hadc2);
 8000e4c:	4899      	ldr	r0, [pc, #612]	@ (80010b4 <task_3_function+0x2cc>)
 8000e4e:	f000 fdfb 	bl	8001a48 <HAL_ADC_Stop>
	switch(button_state)
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <task_3_function+0x78>
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	f000 811d 	beq.w	8001098 <task_3_function+0x2b0>
 8000e5e:	e13c      	b.n	80010da <task_3_function+0x2f2>
	{
	case RELEASED:
		if (!button)
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 811e 	bne.w	80010a4 <task_3_function+0x2bc>
		{
			button_state = PRESSED;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
			switch (cur_state)
 8000e6c:	4b92      	ldr	r3, [pc, #584]	@ (80010b8 <task_3_function+0x2d0>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	f200 8116 	bhi.w	80010a4 <task_3_function+0x2bc>
 8000e78:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <task_3_function+0x98>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e95 	.word	0x08000e95
 8000e84:	08000eb5 	.word	0x08000eb5
 8000e88:	08000f75 	.word	0x08000f75
 8000e8c:	08000edb 	.word	0x08000edb
 8000e90:	08001067 	.word	0x08001067
			{
			case MENU_CHOOSE_MODE:
				if (lcd_cursor == POS_1)
 8000e94:	4b89      	ldr	r3, [pc, #548]	@ (80010bc <task_3_function+0x2d4>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <task_3_function+0xbe>
				{
					cur_state = MENU_CHOOSE_DIFF;
 8000e9e:	4b86      	ldr	r3, [pc, #536]	@ (80010b8 <task_3_function+0x2d0>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
				else
				{
					cur_state = PLAYER_PLAYER;
					lcd_cursor = POS_1;
				}
				break;
 8000ea4:	e0f7      	b.n	8001096 <task_3_function+0x2ae>
					cur_state = PLAYER_PLAYER;
 8000ea6:	4b84      	ldr	r3, [pc, #528]	@ (80010b8 <task_3_function+0x2d0>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	701a      	strb	r2, [r3, #0]
					lcd_cursor = POS_1;
 8000eac:	4b83      	ldr	r3, [pc, #524]	@ (80010bc <task_3_function+0x2d4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
				break;
 8000eb2:	e0f0      	b.n	8001096 <task_3_function+0x2ae>
			case MENU_CHOOSE_DIFF:
			{
				cur_state = PLAYER_AI;
 8000eb4:	4b80      	ldr	r3, [pc, #512]	@ (80010b8 <task_3_function+0x2d0>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	701a      	strb	r2, [r3, #0]
				if (lcd_cursor == POS_1)
 8000eba:	4b80      	ldr	r3, [pc, #512]	@ (80010bc <task_3_function+0x2d4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d103      	bne.n	8000ecc <task_3_function+0xe4>
				{
					ai_mode = EASY;
 8000ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80010c0 <task_3_function+0x2d8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
				else
				{
					ai_mode = HARD;
					lcd_cursor = POS_1;
				}
				break;
 8000eca:	e0e4      	b.n	8001096 <task_3_function+0x2ae>
					ai_mode = HARD;
 8000ecc:	4b7c      	ldr	r3, [pc, #496]	@ (80010c0 <task_3_function+0x2d8>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
					lcd_cursor = POS_1;
 8000ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80010bc <task_3_function+0x2d4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
				break;
 8000ed8:	e0dd      	b.n	8001096 <task_3_function+0x2ae>
			case PLAYER_PLAYER:
				if (turn == PLAYER_1)
 8000eda:	4b7a      	ldr	r3, [pc, #488]	@ (80010c4 <task_3_function+0x2dc>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10f      	bne.n	8000f04 <task_3_function+0x11c>
				{
					board[cursor.row][cursor.column] = 'x';
 8000ee4:	4b78      	ldr	r3, [pc, #480]	@ (80010c8 <task_3_function+0x2e0>)
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4b77      	ldr	r3, [pc, #476]	@ (80010c8 <task_3_function+0x2e0>)
 8000eea:	6819      	ldr	r1, [r3, #0]
 8000eec:	486e      	ldr	r0, [pc, #440]	@ (80010a8 <task_3_function+0x2c0>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4403      	add	r3, r0
 8000ef6:	440b      	add	r3, r1
 8000ef8:	2278      	movs	r2, #120	@ 0x78
 8000efa:	701a      	strb	r2, [r3, #0]
					turn = PLAYER_2;
 8000efc:	4b71      	ldr	r3, [pc, #452]	@ (80010c4 <task_3_function+0x2dc>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e00e      	b.n	8000f22 <task_3_function+0x13a>
				}
				else
				{
					board[cursor.row][cursor.column] = 'o';
 8000f04:	4b70      	ldr	r3, [pc, #448]	@ (80010c8 <task_3_function+0x2e0>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	4b6f      	ldr	r3, [pc, #444]	@ (80010c8 <task_3_function+0x2e0>)
 8000f0a:	6819      	ldr	r1, [r3, #0]
 8000f0c:	4866      	ldr	r0, [pc, #408]	@ (80010a8 <task_3_function+0x2c0>)
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	4403      	add	r3, r0
 8000f16:	440b      	add	r3, r1
 8000f18:	226f      	movs	r2, #111	@ 0x6f
 8000f1a:	701a      	strb	r2, [r3, #0]
					turn = PLAYER_1;
 8000f1c:	4b69      	ldr	r3, [pc, #420]	@ (80010c4 <task_3_function+0x2dc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
				}
				if ((evaluate(board)) || (!check_moves_left(board)))
 8000f22:	4861      	ldr	r0, [pc, #388]	@ (80010a8 <task_3_function+0x2c0>)
 8000f24:	f7ff fbd7 	bl	80006d6 <evaluate>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d106      	bne.n	8000f3c <task_3_function+0x154>
 8000f2e:	485e      	ldr	r0, [pc, #376]	@ (80010a8 <task_3_function+0x2c0>)
 8000f30:	f7ff fba9 	bl	8000686 <check_moves_left>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 80aa 	bne.w	8001090 <task_3_function+0x2a8>
				{
					cur_state = GAME_OVER;
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	@ (80010b8 <task_3_function+0x2d0>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	701a      	strb	r2, [r3, #0]
					if (evaluate(board) == -10)
 8000f42:	4859      	ldr	r0, [pc, #356]	@ (80010a8 <task_3_function+0x2c0>)
 8000f44:	f7ff fbc7 	bl	80006d6 <evaluate>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f113 0f0a 	cmn.w	r3, #10
 8000f4e:	d103      	bne.n	8000f58 <task_3_function+0x170>
					{
						winner = PLAYER_1_WON;
 8000f50:	4b5e      	ldr	r3, [pc, #376]	@ (80010cc <task_3_function+0x2e4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
					else
					{
						winner = DRAW;
					}
				}
				break;
 8000f56:	e09b      	b.n	8001090 <task_3_function+0x2a8>
					else if (evaluate(board) == 10)
 8000f58:	4853      	ldr	r0, [pc, #332]	@ (80010a8 <task_3_function+0x2c0>)
 8000f5a:	f7ff fbbc 	bl	80006d6 <evaluate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b0a      	cmp	r3, #10
 8000f62:	d103      	bne.n	8000f6c <task_3_function+0x184>
						winner = PLAYER_2_WON;
 8000f64:	4b59      	ldr	r3, [pc, #356]	@ (80010cc <task_3_function+0x2e4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
				break;
 8000f6a:	e091      	b.n	8001090 <task_3_function+0x2a8>
						winner = DRAW;
 8000f6c:	4b57      	ldr	r3, [pc, #348]	@ (80010cc <task_3_function+0x2e4>)
 8000f6e:	2203      	movs	r2, #3
 8000f70:	701a      	strb	r2, [r3, #0]
				break;
 8000f72:	e08d      	b.n	8001090 <task_3_function+0x2a8>
			case PLAYER_AI:
				board[cursor.row][cursor.column] = player;
 8000f74:	4b54      	ldr	r3, [pc, #336]	@ (80010c8 <task_3_function+0x2e0>)
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <task_3_function+0x2e0>)
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	484a      	ldr	r0, [pc, #296]	@ (80010a8 <task_3_function+0x2c0>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	4403      	add	r3, r0
 8000f86:	440b      	add	r3, r1
 8000f88:	2278      	movs	r2, #120	@ 0x78
 8000f8a:	701a      	strb	r2, [r3, #0]
				if ((evaluate(board)) || (!check_moves_left(board)))
 8000f8c:	4846      	ldr	r0, [pc, #280]	@ (80010a8 <task_3_function+0x2c0>)
 8000f8e:	f7ff fba2 	bl	80006d6 <evaluate>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <task_3_function+0x1bc>
 8000f98:	4843      	ldr	r0, [pc, #268]	@ (80010a8 <task_3_function+0x2c0>)
 8000f9a:	f7ff fb74 	bl	8000686 <check_moves_left>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11b      	bne.n	8000fdc <task_3_function+0x1f4>
				{
					cur_state = GAME_OVER;
 8000fa4:	4b44      	ldr	r3, [pc, #272]	@ (80010b8 <task_3_function+0x2d0>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	701a      	strb	r2, [r3, #0]
					if (evaluate(board) == -10)
 8000faa:	483f      	ldr	r0, [pc, #252]	@ (80010a8 <task_3_function+0x2c0>)
 8000fac:	f7ff fb93 	bl	80006d6 <evaluate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f113 0f0a 	cmn.w	r3, #10
 8000fb6:	d103      	bne.n	8000fc0 <task_3_function+0x1d8>
					{
						winner = PLAYER_1_WON;
 8000fb8:	4b44      	ldr	r3, [pc, #272]	@ (80010cc <task_3_function+0x2e4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
					if (evaluate(board) == -10)
 8000fbe:	e051      	b.n	8001064 <task_3_function+0x27c>
					}
					else if (evaluate(board) == 10)
 8000fc0:	4839      	ldr	r0, [pc, #228]	@ (80010a8 <task_3_function+0x2c0>)
 8000fc2:	f7ff fb88 	bl	80006d6 <evaluate>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d103      	bne.n	8000fd4 <task_3_function+0x1ec>
					{
						winner = AI_WON;
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80010cc <task_3_function+0x2e4>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	701a      	strb	r2, [r3, #0]
					if (evaluate(board) == -10)
 8000fd2:	e047      	b.n	8001064 <task_3_function+0x27c>
					}
					else
					{
						winner = DRAW;
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	@ (80010cc <task_3_function+0x2e4>)
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	701a      	strb	r2, [r3, #0]
					if (evaluate(board) == -10)
 8000fda:	e043      	b.n	8001064 <task_3_function+0x27c>
					}
				}
				else
				{
					if (ai_mode == EASY)
 8000fdc:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <task_3_function+0x2d8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d107      	bne.n	8000ff6 <task_3_function+0x20e>
					{
						board_easy_mode(board, rand);
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <task_3_function+0x2e8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	482e      	ldr	r0, [pc, #184]	@ (80010a8 <task_3_function+0x2c0>)
 8000ff0:	f7ff fdb4 	bl	8000b5c <board_easy_mode>
 8000ff4:	e00e      	b.n	8001014 <task_3_function+0x22c>
					}
					else
					{
						find_best_move(board);
 8000ff6:	482c      	ldr	r0, [pc, #176]	@ (80010a8 <task_3_function+0x2c0>)
 8000ff8:	f7ff fcba 	bl	8000970 <find_best_move>
						board[best_move.row][best_move.column] = computer;
 8000ffc:	4b35      	ldr	r3, [pc, #212]	@ (80010d4 <task_3_function+0x2ec>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4b34      	ldr	r3, [pc, #208]	@ (80010d4 <task_3_function+0x2ec>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4828      	ldr	r0, [pc, #160]	@ (80010a8 <task_3_function+0x2c0>)
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	4403      	add	r3, r0
 800100e:	440b      	add	r3, r1
 8001010:	226f      	movs	r2, #111	@ 0x6f
 8001012:	701a      	strb	r2, [r3, #0]
					}
					if ((evaluate(board)) || (!check_moves_left(board)))
 8001014:	4824      	ldr	r0, [pc, #144]	@ (80010a8 <task_3_function+0x2c0>)
 8001016:	f7ff fb5e 	bl	80006d6 <evaluate>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <task_3_function+0x244>
 8001020:	4821      	ldr	r0, [pc, #132]	@ (80010a8 <task_3_function+0x2c0>)
 8001022:	f7ff fb30 	bl	8000686 <check_moves_left>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d133      	bne.n	8001094 <task_3_function+0x2ac>
					{
						cur_state = GAME_OVER;
 800102c:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <task_3_function+0x2d0>)
 800102e:	2204      	movs	r2, #4
 8001030:	701a      	strb	r2, [r3, #0]
						if (evaluate(board) == -10)
 8001032:	481d      	ldr	r0, [pc, #116]	@ (80010a8 <task_3_function+0x2c0>)
 8001034:	f7ff fb4f 	bl	80006d6 <evaluate>
 8001038:	4603      	mov	r3, r0
 800103a:	f113 0f0a 	cmn.w	r3, #10
 800103e:	d103      	bne.n	8001048 <task_3_function+0x260>
						{
							winner = PLAYER_1_WON;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <task_3_function+0x2e4>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
						{
							winner = DRAW;
						}
					}
				}
				break;
 8001046:	e025      	b.n	8001094 <task_3_function+0x2ac>
						else if (evaluate(board) == 10)
 8001048:	4817      	ldr	r0, [pc, #92]	@ (80010a8 <task_3_function+0x2c0>)
 800104a:	f7ff fb44 	bl	80006d6 <evaluate>
 800104e:	4603      	mov	r3, r0
 8001050:	2b0a      	cmp	r3, #10
 8001052:	d103      	bne.n	800105c <task_3_function+0x274>
							winner = AI_WON;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <task_3_function+0x2e4>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
				break;
 800105a:	e01b      	b.n	8001094 <task_3_function+0x2ac>
							winner = DRAW;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <task_3_function+0x2e4>)
 800105e:	2203      	movs	r2, #3
 8001060:	701a      	strb	r2, [r3, #0]
				break;
 8001062:	e017      	b.n	8001094 <task_3_function+0x2ac>
 8001064:	e016      	b.n	8001094 <task_3_function+0x2ac>
			case GAME_OVER:
				board_clear(board);
 8001066:	4810      	ldr	r0, [pc, #64]	@ (80010a8 <task_3_function+0x2c0>)
 8001068:	f7ff fcfa 	bl	8000a60 <board_clear>
				cursor.row = 0;
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <task_3_function+0x2e0>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
				cursor.column = 0;
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <task_3_function+0x2e0>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
				best_move.row = -1;
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <task_3_function+0x2ec>)
 800107a:	f04f 32ff 	mov.w	r2, #4294967295
 800107e:	605a      	str	r2, [r3, #4]
				best_move.column = -1;
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <task_3_function+0x2ec>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295
 8001086:	601a      	str	r2, [r3, #0]
				cur_state = MENU_CHOOSE_MODE;
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <task_3_function+0x2d0>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
				break;
 800108e:	e002      	b.n	8001096 <task_3_function+0x2ae>
				break;
 8001090:	bf00      	nop
 8001092:	e007      	b.n	80010a4 <task_3_function+0x2bc>
				break;
 8001094:	bf00      	nop
			}
			}
		}
		break;
 8001096:	e005      	b.n	80010a4 <task_3_function+0x2bc>
	case PRESSED:
		if (button)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01c      	beq.n	80010d8 <task_3_function+0x2f0>
		{
			button_state = RELEASED;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
		}
		break;
 80010a2:	e019      	b.n	80010d8 <task_3_function+0x2f0>
		break;
 80010a4:	bf00      	nop
 80010a6:	e018      	b.n	80010da <task_3_function+0x2f2>
 80010a8:	2000042c 	.word	0x2000042c
 80010ac:	40010800 	.word	0x40010800
 80010b0:	20000324 	.word	0x20000324
 80010b4:	20000354 	.word	0x20000354
 80010b8:	20000441 	.word	0x20000441
 80010bc:	20000440 	.word	0x20000440
 80010c0:	20000443 	.word	0x20000443
 80010c4:	20000442 	.word	0x20000442
 80010c8:	20000438 	.word	0x20000438
 80010cc:	20000444 	.word	0x20000444
 80010d0:	20000445 	.word	0x20000445
 80010d4:	20000000 	.word	0x20000000
		break;
 80010d8:	bf00      	nop
//			button_3_state = RELEASED;
//		}
//		break;
//	}
	// ADC1 handler
	switch(adc_1_state)
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d06b      	beq.n	80011b8 <task_3_function+0x3d0>
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	dc73      	bgt.n	80011cc <task_3_function+0x3e4>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <task_3_function+0x306>
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d05d      	beq.n	80011a8 <task_3_function+0x3c0>
 80010ec:	e06e      	b.n	80011cc <task_3_function+0x3e4>
	{
	case ZERO:
		if (adc_1_val > 3500)
 80010ee:	8a7b      	ldrh	r3, [r7, #18]
 80010f0:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d927      	bls.n	8001148 <task_3_function+0x360>
		{
			adc_1_state = POS;
 80010f8:	2301      	movs	r3, #1
 80010fa:	75bb      	strb	r3, [r7, #22]
			switch(cur_state)
 80010fc:	4b72      	ldr	r3, [pc, #456]	@ (80012c8 <task_3_function+0x4e0>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b01      	cmp	r3, #1
 8001104:	dc02      	bgt.n	800110c <task_3_function+0x324>
 8001106:	2b00      	cmp	r3, #0
 8001108:	da04      	bge.n	8001114 <task_3_function+0x32c>
					cursor.row = 2;
				}
				break;
			}
		}
		break;
 800110a:	e05c      	b.n	80011c6 <task_3_function+0x3de>
 800110c:	3b02      	subs	r3, #2
 800110e:	2b01      	cmp	r3, #1
 8001110:	d859      	bhi.n	80011c6 <task_3_function+0x3de>
 8001112:	e00c      	b.n	800112e <task_3_function+0x346>
				if (lcd_cursor == POS_1)
 8001114:	4b6d      	ldr	r3, [pc, #436]	@ (80012cc <task_3_function+0x4e4>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <task_3_function+0x33e>
					lcd_cursor = POS_2;
 800111e:	4b6b      	ldr	r3, [pc, #428]	@ (80012cc <task_3_function+0x4e4>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
				break;
 8001124:	e03f      	b.n	80011a6 <task_3_function+0x3be>
					lcd_cursor = POS_1;
 8001126:	4b69      	ldr	r3, [pc, #420]	@ (80012cc <task_3_function+0x4e4>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
				break;
 800112c:	e03b      	b.n	80011a6 <task_3_function+0x3be>
				cursor.row++;
 800112e:	4b68      	ldr	r3, [pc, #416]	@ (80012d0 <task_3_function+0x4e8>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	4a66      	ldr	r2, [pc, #408]	@ (80012d0 <task_3_function+0x4e8>)
 8001136:	6053      	str	r3, [r2, #4]
				if (cursor.row > 2)
 8001138:	4b65      	ldr	r3, [pc, #404]	@ (80012d0 <task_3_function+0x4e8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b02      	cmp	r3, #2
 800113e:	dd2f      	ble.n	80011a0 <task_3_function+0x3b8>
					cursor.row = 0;
 8001140:	4b63      	ldr	r3, [pc, #396]	@ (80012d0 <task_3_function+0x4e8>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
				break;
 8001146:	e02b      	b.n	80011a0 <task_3_function+0x3b8>
		else if (adc_1_val < 500)
 8001148:	8a7b      	ldrh	r3, [r7, #18]
 800114a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800114e:	d23a      	bcs.n	80011c6 <task_3_function+0x3de>
			adc_1_state = NEG;
 8001150:	2302      	movs	r3, #2
 8001152:	75bb      	strb	r3, [r7, #22]
			switch(cur_state)
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <task_3_function+0x4e0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	dc02      	bgt.n	8001164 <task_3_function+0x37c>
 800115e:	2b00      	cmp	r3, #0
 8001160:	da04      	bge.n	800116c <task_3_function+0x384>
		break;
 8001162:	e030      	b.n	80011c6 <task_3_function+0x3de>
 8001164:	3b02      	subs	r3, #2
 8001166:	2b01      	cmp	r3, #1
 8001168:	d82d      	bhi.n	80011c6 <task_3_function+0x3de>
 800116a:	e00c      	b.n	8001186 <task_3_function+0x39e>
				if (lcd_cursor == POS_1)
 800116c:	4b57      	ldr	r3, [pc, #348]	@ (80012cc <task_3_function+0x4e4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <task_3_function+0x396>
					lcd_cursor = POS_2;
 8001176:	4b55      	ldr	r3, [pc, #340]	@ (80012cc <task_3_function+0x4e4>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
				break;
 800117c:	e013      	b.n	80011a6 <task_3_function+0x3be>
					lcd_cursor = POS_1;
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <task_3_function+0x4e4>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
				break;
 8001184:	e00f      	b.n	80011a6 <task_3_function+0x3be>
				cursor.row--;
 8001186:	4b52      	ldr	r3, [pc, #328]	@ (80012d0 <task_3_function+0x4e8>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	4a50      	ldr	r2, [pc, #320]	@ (80012d0 <task_3_function+0x4e8>)
 800118e:	6053      	str	r3, [r2, #4]
				if (cursor.row < 0)
 8001190:	4b4f      	ldr	r3, [pc, #316]	@ (80012d0 <task_3_function+0x4e8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	da05      	bge.n	80011a4 <task_3_function+0x3bc>
					cursor.row = 2;
 8001198:	4b4d      	ldr	r3, [pc, #308]	@ (80012d0 <task_3_function+0x4e8>)
 800119a:	2202      	movs	r2, #2
 800119c:	605a      	str	r2, [r3, #4]
				break;
 800119e:	e001      	b.n	80011a4 <task_3_function+0x3bc>
				break;
 80011a0:	bf00      	nop
 80011a2:	e010      	b.n	80011c6 <task_3_function+0x3de>
				break;
 80011a4:	bf00      	nop
		break;
 80011a6:	e00e      	b.n	80011c6 <task_3_function+0x3de>
	case POS:
		if (adc_1_val < 3500)
 80011a8:	8a7b      	ldrh	r3, [r7, #18]
 80011aa:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d80b      	bhi.n	80011ca <task_3_function+0x3e2>
		{
			adc_1_state = ZERO;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75bb      	strb	r3, [r7, #22]
		}
		break;
 80011b6:	e008      	b.n	80011ca <task_3_function+0x3e2>
	case NEG:
		if (adc_1_val > 500)
 80011b8:	8a7b      	ldrh	r3, [r7, #18]
 80011ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011be:	d905      	bls.n	80011cc <task_3_function+0x3e4>
		{
			adc_1_state = ZERO;
 80011c0:	2300      	movs	r3, #0
 80011c2:	75bb      	strb	r3, [r7, #22]
 80011c4:	e002      	b.n	80011cc <task_3_function+0x3e4>
		break;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <task_3_function+0x3e4>
		break;
 80011ca:	bf00      	nop
		}
	}
	// ADC2 handler
	switch(adc_2_state)
 80011cc:	7d7b      	ldrb	r3, [r7, #21]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d06b      	beq.n	80012aa <task_3_function+0x4c2>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dc73      	bgt.n	80012be <task_3_function+0x4d6>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <task_3_function+0x3f8>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d05d      	beq.n	800129a <task_3_function+0x4b2>
 80011de:	e06e      	b.n	80012be <task_3_function+0x4d6>
	{
	case ZERO:
		if (adc_2_val > 3500)
 80011e0:	8a3b      	ldrh	r3, [r7, #16]
 80011e2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d927      	bls.n	800123a <task_3_function+0x452>
		{
			adc_2_state = POS;
 80011ea:	2301      	movs	r3, #1
 80011ec:	757b      	strb	r3, [r7, #21]
			switch(cur_state)
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <task_3_function+0x4e0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	dc02      	bgt.n	80011fe <task_3_function+0x416>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da04      	bge.n	8001206 <task_3_function+0x41e>
					cursor.column = 0;
				}
				break;
			}
		}
		break;
 80011fc:	e05c      	b.n	80012b8 <task_3_function+0x4d0>
 80011fe:	3b02      	subs	r3, #2
 8001200:	2b01      	cmp	r3, #1
 8001202:	d859      	bhi.n	80012b8 <task_3_function+0x4d0>
 8001204:	e00c      	b.n	8001220 <task_3_function+0x438>
				if (lcd_cursor == POS_1)
 8001206:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <task_3_function+0x4e4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d103      	bne.n	8001218 <task_3_function+0x430>
					lcd_cursor = POS_2;
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <task_3_function+0x4e4>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
				break;
 8001216:	e03f      	b.n	8001298 <task_3_function+0x4b0>
					lcd_cursor = POS_1;
 8001218:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <task_3_function+0x4e4>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
				break;
 800121e:	e03b      	b.n	8001298 <task_3_function+0x4b0>
				cursor.column--;
 8001220:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <task_3_function+0x4e8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a2a      	ldr	r2, [pc, #168]	@ (80012d0 <task_3_function+0x4e8>)
 8001228:	6013      	str	r3, [r2, #0]
				if (cursor.column < 0)
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <task_3_function+0x4e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da2f      	bge.n	8001292 <task_3_function+0x4aa>
					cursor.column = 2;
 8001232:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <task_3_function+0x4e8>)
 8001234:	2202      	movs	r2, #2
 8001236:	601a      	str	r2, [r3, #0]
				break;
 8001238:	e02b      	b.n	8001292 <task_3_function+0x4aa>
		else if (adc_2_val < 500)
 800123a:	8a3b      	ldrh	r3, [r7, #16]
 800123c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001240:	d23a      	bcs.n	80012b8 <task_3_function+0x4d0>
			adc_2_state = NEG;
 8001242:	2302      	movs	r3, #2
 8001244:	757b      	strb	r3, [r7, #21]
			switch(cur_state)
 8001246:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <task_3_function+0x4e0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b01      	cmp	r3, #1
 800124e:	dc02      	bgt.n	8001256 <task_3_function+0x46e>
 8001250:	2b00      	cmp	r3, #0
 8001252:	da04      	bge.n	800125e <task_3_function+0x476>
		break;
 8001254:	e030      	b.n	80012b8 <task_3_function+0x4d0>
 8001256:	3b02      	subs	r3, #2
 8001258:	2b01      	cmp	r3, #1
 800125a:	d82d      	bhi.n	80012b8 <task_3_function+0x4d0>
 800125c:	e00c      	b.n	8001278 <task_3_function+0x490>
				if (lcd_cursor == POS_1)
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <task_3_function+0x4e4>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <task_3_function+0x488>
					lcd_cursor = POS_2;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <task_3_function+0x4e4>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
				break;
 800126e:	e013      	b.n	8001298 <task_3_function+0x4b0>
					lcd_cursor = POS_1;
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <task_3_function+0x4e4>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
				break;
 8001276:	e00f      	b.n	8001298 <task_3_function+0x4b0>
				cursor.column++;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <task_3_function+0x4e8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a14      	ldr	r2, [pc, #80]	@ (80012d0 <task_3_function+0x4e8>)
 8001280:	6013      	str	r3, [r2, #0]
				if (cursor.column > 2)
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <task_3_function+0x4e8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	dd05      	ble.n	8001296 <task_3_function+0x4ae>
					cursor.column = 0;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <task_3_function+0x4e8>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
				break;
 8001290:	e001      	b.n	8001296 <task_3_function+0x4ae>
				break;
 8001292:	bf00      	nop
 8001294:	e010      	b.n	80012b8 <task_3_function+0x4d0>
				break;
 8001296:	bf00      	nop
		break;
 8001298:	e00e      	b.n	80012b8 <task_3_function+0x4d0>
	case POS:
		if (adc_2_val < 3500)
 800129a:	8a3b      	ldrh	r3, [r7, #16]
 800129c:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d80b      	bhi.n	80012bc <task_3_function+0x4d4>
		{
			adc_2_state = ZERO;
 80012a4:	2300      	movs	r3, #0
 80012a6:	757b      	strb	r3, [r7, #21]
		}
		break;
 80012a8:	e008      	b.n	80012bc <task_3_function+0x4d4>
	case NEG:
		if (adc_2_val > 500)
 80012aa:	8a3b      	ldrh	r3, [r7, #16]
 80012ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012b0:	d905      	bls.n	80012be <task_3_function+0x4d6>
		{
			adc_2_state = ZERO;
 80012b2:	2300      	movs	r3, #0
 80012b4:	757b      	strb	r3, [r7, #21]
 80012b6:	e002      	b.n	80012be <task_3_function+0x4d6>
		break;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <task_3_function+0x4d6>
		break;
 80012bc:	bf00      	nop
		}
	}
	osDelay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f003 f824 	bl	800430c <osDelay>
	button = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80012c4:	e5a1      	b.n	8000e0a <task_3_function+0x22>
 80012c6:	bf00      	nop
 80012c8:	20000441 	.word	0x20000441
 80012cc:	20000440 	.word	0x20000440
 80012d0:	20000438 	.word	0x20000438

080012d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	@ (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e6:	f000 fa0d 	bl	8001704 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <Error_Handler+0x8>

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_MspInit+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <HAL_MspInit+0x68>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_MspInit+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_MspInit+0x68>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a11      	ldr	r2, [pc, #68]	@ (800136c <HAL_MspInit+0x68>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_MspInit+0x68>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	210f      	movs	r1, #15
 800133e:	f06f 0001 	mvn.w	r0, #1
 8001342:	f000 ff08 	bl	8002156 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_MspInit+0x6c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <HAL_MspInit+0x6c>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a28      	ldr	r2, [pc, #160]	@ (8001430 <HAL_ADC_MspInit+0xbc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d122      	bne.n	80013da <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a26      	ldr	r2, [pc, #152]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 800139a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a20      	ldr	r2, [pc, #128]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c4:	2340      	movs	r3, #64	@ 0x40
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4819      	ldr	r0, [pc, #100]	@ (8001438 <HAL_ADC_MspInit+0xc4>)
 80013d4:	f000 feea 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80013d8:	e026      	b.n	8001428 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_ADC_MspInit+0xc8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d121      	bne.n	8001428 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_ADC_MspInit+0xc0>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001418:	2303      	movs	r3, #3
 800141a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0318 	add.w	r3, r7, #24
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <HAL_ADC_MspInit+0xc4>)
 8001424:	f000 fec2 	bl	80021ac <HAL_GPIO_Init>
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40012400 	.word	0x40012400
 8001434:	40021000 	.word	0x40021000
 8001438:	40010800 	.word	0x40010800
 800143c:	40012800 	.word	0x40012800

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_I2C_MspInit+0x70>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d123      	bne.n	80014a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a13      	ldr	r2, [pc, #76]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001478:	23c0      	movs	r3, #192	@ 0xc0
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <HAL_I2C_MspInit+0x78>)
 800148c:	f000 fe8e 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a07      	ldr	r2, [pc, #28]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 8001496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800149a:	61d3      	str	r3, [r2, #28]
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_I2C_MspInit+0x74>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010c00 	.word	0x40010c00

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_UART_MspInit+0x8c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d131      	bne.n	8001540 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_UART_MspInit+0x90>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <HAL_UART_MspInit+0x90>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_UART_MspInit+0x90>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_UART_MspInit+0x90>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <HAL_UART_MspInit+0x90>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_UART_MspInit+0x90>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800150c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <HAL_UART_MspInit+0x94>)
 8001522:	f000 fe43 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_UART_MspInit+0x94>)
 800153c:	f000 fe36 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013800 	.word	0x40013800
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800

08001554 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800156a:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <HAL_InitTick+0xd0>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_InitTick+0xd0>)
 8001570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001574:	6193      	str	r3, [r2, #24]
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_InitTick+0xd0>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001582:	f107 020c 	add.w	r2, r7, #12
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f002 f837 	bl	8003600 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001592:	f002 f821 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8001596:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159a:	4a23      	ldr	r2, [pc, #140]	@ (8001628 <HAL_InitTick+0xd4>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3b01      	subs	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_InitTick+0xd8>)
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_InitTick+0xdc>)
 80015aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_InitTick+0xd8>)
 80015ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015b2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015b4:	4a1d      	ldr	r2, [pc, #116]	@ (800162c <HAL_InitTick+0xd8>)
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_InitTick+0xd8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_InitTick+0xd8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_InitTick+0xd8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80015cc:	4817      	ldr	r0, [pc, #92]	@ (800162c <HAL_InitTick+0xd8>)
 80015ce:	f002 f9d1 	bl	8003974 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d11b      	bne.n	8001618 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015e0:	4812      	ldr	r0, [pc, #72]	@ (800162c <HAL_InitTick+0xd8>)
 80015e2:	f002 fa1f 	bl	8003a24 <HAL_TIM_Base_Start_IT>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80015f4:	2019      	movs	r0, #25
 80015f6:	f000 fdca 	bl	800218e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d808      	bhi.n	8001612 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	2019      	movs	r0, #25
 8001606:	f000 fda6 	bl	8002156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_InitTick+0xe0>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e002      	b.n	8001618 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800161c:	4618      	mov	r0, r3
 800161e:	3730      	adds	r7, #48	@ 0x30
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	431bde83 	.word	0x431bde83
 800162c:	20000448 	.word	0x20000448
 8001630:	40012c00 	.word	0x40012c00
 8001634:	2000000c 	.word	0x2000000c

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <TIM1_UP_IRQHandler+0x10>)
 8001672:	f002 fa29 	bl	8003ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000448 	.word	0x20000448

08001680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff fff8 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001694:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a09      	ldr	r2, [pc, #36]	@ (80016cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a8:	4c09      	ldr	r4, [pc, #36]	@ (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 f845 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7fe fd61 	bl	8000180 <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016c8:	08005a24 	.word	0x08005a24
  ldr r2, =_sbss
 80016cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016d0:	20001328 	.word	0x20001328

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 fd29 	bl	8002140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f7ff ff30 	bl	8001554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fe06 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000010 	.word	0x20000010
 8001724:	20000490 	.word	0x20000490

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	@ (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000490 	.word	0x20000490

0800173c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0be      	b.n	80018dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fdfa 	bl	8001374 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fbf1 	bl	8001f68 <ADC_ConversionStop_Disable>
 8001786:	4603      	mov	r3, r0
 8001788:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8099 	bne.w	80018ca <HAL_ADC_Init+0x18e>
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 8095 	bne.w	80018ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017a8:	f023 0302 	bic.w	r3, r3, #2
 80017ac:	f043 0202 	orr.w	r2, r3, #2
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7b1b      	ldrb	r3, [r3, #12]
 80017c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017d4:	d003      	beq.n	80017de <HAL_ADC_Init+0xa2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <HAL_ADC_Init+0xa8>
 80017de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e2:	e000      	b.n	80017e6 <HAL_ADC_Init+0xaa>
 80017e4:	2300      	movs	r3, #0
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7d1b      	ldrb	r3, [r3, #20]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d119      	bne.n	8001828 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7b1b      	ldrb	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	3b01      	subs	r3, #1
 8001802:	035a      	lsls	r2, r3, #13
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e00b      	b.n	8001828 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	f043 0220 	orr.w	r2, r3, #32
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <HAL_ADC_Init+0x1a8>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	430b      	orrs	r3, r1
 800184e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001858:	d003      	beq.n	8001862 <HAL_ADC_Init+0x126>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d104      	bne.n	800186c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	3b01      	subs	r3, #1
 8001868:	051b      	lsls	r3, r3, #20
 800186a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	430a      	orrs	r2, r1
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_ADC_Init+0x1ac>)
 8001888:	4013      	ands	r3, r2
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	d10b      	bne.n	80018a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a6:	e018      	b.n	80018da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	f023 0312 	bic.w	r3, r3, #18
 80018b0:	f043 0210 	orr.w	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c8:	e007      	b.n	80018da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f043 0210 	orr.w	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018da:	7dfb      	ldrb	r3, [r7, #23]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	ffe1f7fd 	.word	0xffe1f7fd
 80018e8:	ff1f0efe 	.word	0xff1f0efe

080018ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Start+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e098      	b.n	8001a38 <HAL_ADC_Start+0x14c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fad0 	bl	8001eb4 <ADC_Enable>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8087 	bne.w	8001a2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a41      	ldr	r2, [pc, #260]	@ (8001a40 <HAL_ADC_Start+0x154>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d105      	bne.n	800194a <HAL_ADC_Start+0x5e>
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <HAL_ADC_Start+0x158>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d115      	bne.n	8001976 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d026      	beq.n	80019b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800196c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001974:	e01d      	b.n	80019b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <HAL_ADC_Start+0x158>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_ADC_Start+0xaa>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <HAL_ADC_Start+0x154>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10d      	bne.n	80019b2 <HAL_ADC_Start+0xc6>
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <HAL_ADC_Start+0x158>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c2:	f023 0206 	bic.w	r2, r3, #6
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019ca:	e002      	b.n	80019d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0202 	mvn.w	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019f2:	d113      	bne.n	8001a1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_ADC_Start+0x154>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d105      	bne.n	8001a0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_ADC_Start+0x158>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	e00c      	b.n	8001a36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40012800 	.word	0x40012800
 8001a44:	40012400 	.word	0x40012400

08001a48 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Stop+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e01a      	b.n	8001a98 <HAL_ADC_Stop+0x50>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fa7c 	bl	8001f68 <ADC_ConversionStop_Disable>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ab6:	f7ff fe37 	bl	8001728 <HAL_GetTick>
 8001aba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0d3      	b.n	8001c8a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d131      	bne.n	8001b54 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d12a      	bne.n	8001b54 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001afe:	e021      	b.n	8001b44 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b06:	d01d      	beq.n	8001b44 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_ADC_PollForConversion+0x7e>
 8001b0e:	f7ff fe0b 	bl	8001728 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d212      	bcs.n	8001b44 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10b      	bne.n	8001b44 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0a2      	b.n	8001c8a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0d6      	beq.n	8001b00 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b52:	e070      	b.n	8001c36 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b54:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <HAL_ADC_PollForConversion+0x1f4>)
 8001b56:	681c      	ldr	r4, [r3, #0]
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f001 fe55 	bl	8003808 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <HAL_ADC_PollForConversion+0x1f8>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x104>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68d9      	ldr	r1, [r3, #12]
 8001b78:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <HAL_ADC_PollForConversion+0x1fc>)
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d111      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x104>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	4b46      	ldr	r3, [pc, #280]	@ (8001ca0 <HAL_ADC_PollForConversion+0x200>)
 8001b88:	400b      	ands	r3, r1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x100>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_ADC_PollForConversion+0x204>)
 8001b96:	400b      	ands	r3, r1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_PollForConversion+0x100>
 8001b9c:	2314      	movs	r3, #20
 8001b9e:	e020      	b.n	8001be2 <HAL_ADC_PollForConversion+0x142>
 8001ba0:	2329      	movs	r3, #41	@ 0x29
 8001ba2:	e01e      	b.n	8001be2 <HAL_ADC_PollForConversion+0x142>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca0 <HAL_ADC_PollForConversion+0x200>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x120>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68d9      	ldr	r1, [r3, #12]
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_ADC_PollForConversion+0x204>)
 8001bba:	400b      	ands	r3, r1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00d      	beq.n	8001bdc <HAL_ADC_PollForConversion+0x13c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_ADC_PollForConversion+0x208>)
 8001bc8:	400b      	ands	r3, r1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d108      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x140>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68d9      	ldr	r1, [r3, #12]
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <HAL_ADC_PollForConversion+0x208>)
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x140>
 8001bdc:	2354      	movs	r3, #84	@ 0x54
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_PollForConversion+0x142>
 8001be0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001be8:	e021      	b.n	8001c2e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d01a      	beq.n	8001c28 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_ADC_PollForConversion+0x168>
 8001bf8:	f7ff fd96 	bl	8001728 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d20f      	bcs.n	8001c28 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d90b      	bls.n	8001c28 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f043 0204 	orr.w	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e030      	b.n	8001c8a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d8d9      	bhi.n	8001bea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 0212 	mvn.w	r2, #18
 8001c3e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c56:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c5a:	d115      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000008 	.word	0x20000008
 8001c98:	24924924 	.word	0x24924924
 8001c9c:	00924924 	.word	0x00924924
 8001ca0:	12492492 	.word	0x12492492
 8001ca4:	00492492 	.word	0x00492492
 8001ca8:	00249249 	.word	0x00249249

08001cac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x20>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0dc      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x1da>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d81c      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b05      	subs	r3, #5
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	4019      	ands	r1, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b05      	subs	r3, #5
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d2c:	e03c      	b.n	8001da8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d81c      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b23      	subs	r3, #35	@ 0x23
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4019      	ands	r1, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b23      	subs	r3, #35	@ 0x23
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d6e:	e01b      	b.n	8001da8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b41      	subs	r3, #65	@ 0x41
 8001d82:	221f      	movs	r2, #31
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b41      	subs	r3, #65	@ 0x41
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d91c      	bls.n	8001dea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	e019      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d003      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e2a:	2b11      	cmp	r3, #17
 8001e2c:	d132      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d125      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d126      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d11a      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <HAL_ADC_ConfigChannel+0x1e8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	0c9a      	lsrs	r2, r3, #18
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e74:	e002      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f9      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x1b2>
 8001e82:	e007      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	f043 0220 	orr.w	r2, r3, #32
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40012400 	.word	0x40012400
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	431bde83 	.word	0x431bde83

08001eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d040      	beq.n	8001f54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <ADC_Enable+0xac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <ADC_Enable+0xb0>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ef0:	e002      	b.n	8001ef8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001efe:	f7ff fc13 	bl	8001728 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f04:	e01f      	b.n	8001f46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f06:	f7ff fc0f 	bl	8001728 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d918      	bls.n	8001f46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d011      	beq.n	8001f46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e007      	b.n	8001f56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d1d8      	bne.n	8001f06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d12e      	bne.n	8001fe0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f92:	f7ff fbc9 	bl	8001728 <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f98:	e01b      	b.n	8001fd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f9a:	f7ff fbc5 	bl	8001728 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d914      	bls.n	8001fd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10d      	bne.n	8001fd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e007      	b.n	8001fe2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d0dc      	beq.n	8001f9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4906      	ldr	r1, [pc, #24]	@ (8002084 <__NVIC_EnableIRQ+0x34>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ff4f 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002168:	f7ff ff64 	bl	8002034 <__NVIC_GetPriorityGrouping>
 800216c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ffb2 	bl	80020dc <NVIC_EncodePriority>
 8002178:	4602      	mov	r2, r0
 800217a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff81 	bl	8002088 <__NVIC_SetPriority>
}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	4603      	mov	r3, r0
 8002196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff57 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b08b      	sub	sp, #44	@ 0x2c
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e169      	b.n	8002494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8158 	bne.w	800248e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a9a      	ldr	r2, [pc, #616]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021e8:	4a98      	ldr	r2, [pc, #608]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d875      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021ee:	4a98      	ldr	r2, [pc, #608]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d058      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021f4:	4a96      	ldr	r2, [pc, #600]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d86f      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021fa:	4a96      	ldr	r2, [pc, #600]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d052      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002200:	4a94      	ldr	r2, [pc, #592]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d869      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002206:	4a94      	ldr	r2, [pc, #592]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04c      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 800220c:	4a92      	ldr	r2, [pc, #584]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d863      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002212:	4a92      	ldr	r2, [pc, #584]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d046      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002218:	4a90      	ldr	r2, [pc, #576]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d85d      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d82a      	bhi.n	8002278 <HAL_GPIO_Init+0xcc>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d859      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_GPIO_Init+0x80>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022a7 	.word	0x080022a7
 8002230:	08002281 	.word	0x08002281
 8002234:	08002293 	.word	0x08002293
 8002238:	080022d5 	.word	0x080022d5
 800223c:	080022db 	.word	0x080022db
 8002240:	080022db 	.word	0x080022db
 8002244:	080022db 	.word	0x080022db
 8002248:	080022db 	.word	0x080022db
 800224c:	080022db 	.word	0x080022db
 8002250:	080022db 	.word	0x080022db
 8002254:	080022db 	.word	0x080022db
 8002258:	080022db 	.word	0x080022db
 800225c:	080022db 	.word	0x080022db
 8002260:	080022db 	.word	0x080022db
 8002264:	080022db 	.word	0x080022db
 8002268:	080022db 	.word	0x080022db
 800226c:	080022db 	.word	0x080022db
 8002270:	08002289 	.word	0x08002289
 8002274:	0800229d 	.word	0x0800229d
 8002278:	4a79      	ldr	r2, [pc, #484]	@ (8002460 <HAL_GPIO_Init+0x2b4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227e:	e02c      	b.n	80022da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e029      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	3304      	adds	r3, #4
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e024      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	3308      	adds	r3, #8
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e01f      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e01a      	b.n	80022dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e013      	b.n	80022dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	611a      	str	r2, [r3, #16]
          break;
 80022c6:	e009      	b.n	80022dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	615a      	str	r2, [r3, #20]
          break;
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x130>
          break;
 80022da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d801      	bhi.n	80022e6 <HAL_GPIO_Init+0x13a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_Init+0x13e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	@ 0xff
 80022f0:	d802      	bhi.n	80022f8 <HAL_GPIO_Init+0x14c>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x152>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	3b08      	subs	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	210f      	movs	r1, #15
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b1 	beq.w	800248e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800232c:	4b4d      	ldr	r3, [pc, #308]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a4c      	ldr	r2, [pc, #304]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002344:	4a48      	ldr	r2, [pc, #288]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a40      	ldr	r2, [pc, #256]	@ (800246c <HAL_GPIO_Init+0x2c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1ec>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <HAL_GPIO_Init+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1e8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3e      	ldr	r2, [pc, #248]	@ (8002474 <HAL_GPIO_Init+0x2c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1e4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	@ (8002478 <HAL_GPIO_Init+0x2cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1e0>
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 800238c:	2304      	movs	r3, #4
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002398:	2300      	movs	r3, #0
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023aa:	492f      	ldr	r1, [pc, #188]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	492c      	ldr	r1, [pc, #176]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4928      	ldr	r1, [pc, #160]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	491e      	ldr	r1, [pc, #120]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4918      	ldr	r1, [pc, #96]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002422:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4914      	ldr	r1, [pc, #80]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e021      	b.n	800248e <HAL_GPIO_Init+0x2e2>
 800244a:	bf00      	nop
 800244c:	10320000 	.word	0x10320000
 8002450:	10310000 	.word	0x10310000
 8002454:	10220000 	.word	0x10220000
 8002458:	10210000 	.word	0x10210000
 800245c:	10120000 	.word	0x10120000
 8002460:	10110000 	.word	0x10110000
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	40010800 	.word	0x40010800
 8002470:	40010c00 	.word	0x40010c00
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400
 800247c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 800248a:	4013      	ands	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae8e 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	@ 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e12b      	b.n	800274e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe ff98 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	@ 0x24
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002548:	f001 f832 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a81      	ldr	r2, [pc, #516]	@ (8002758 <HAL_I2C_Init+0x274>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d807      	bhi.n	8002568 <HAL_I2C_Init+0x84>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a80      	ldr	r2, [pc, #512]	@ (800275c <HAL_I2C_Init+0x278>)
 800255c:	4293      	cmp	r3, r2
 800255e:	bf94      	ite	ls
 8002560:	2301      	movls	r3, #1
 8002562:	2300      	movhi	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e006      	b.n	8002576 <HAL_I2C_Init+0x92>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a7d      	ldr	r2, [pc, #500]	@ (8002760 <HAL_I2C_Init+0x27c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	bf94      	ite	ls
 8002570:	2301      	movls	r3, #1
 8002572:	2300      	movhi	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e7      	b.n	800274e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a78      	ldr	r2, [pc, #480]	@ (8002764 <HAL_I2C_Init+0x280>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9b      	lsrs	r3, r3, #18
 8002588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d802      	bhi.n	80025b8 <HAL_I2C_Init+0xd4>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3301      	adds	r3, #1
 80025b6:	e009      	b.n	80025cc <HAL_I2C_Init+0xe8>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	4a69      	ldr	r2, [pc, #420]	@ (8002768 <HAL_I2C_Init+0x284>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	3301      	adds	r3, #1
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	495c      	ldr	r1, [pc, #368]	@ (8002758 <HAL_I2C_Init+0x274>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d819      	bhi.n	8002620 <HAL_I2C_Init+0x13c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e59      	subs	r1, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fa:	1c59      	adds	r1, r3, #1
 80025fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002600:	400b      	ands	r3, r1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_I2C_Init+0x138>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e59      	subs	r1, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fbb1 f3f3 	udiv	r3, r1, r3
 8002614:	3301      	adds	r3, #1
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	e051      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800261c:	2304      	movs	r3, #4
 800261e:	e04f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_I2C_Init+0x168>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e012      	b.n	8002672 <HAL_I2C_Init+0x18e>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x196>
 8002676:	2301      	movs	r3, #1
 8002678:	e022      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <HAL_I2C_Init+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e58      	subs	r0, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	440b      	add	r3, r1
 8002690:	fbb0 f3f3 	udiv	r3, r0, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Init+0x1dc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	6809      	ldr	r1, [r1, #0]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6911      	ldr	r1, [r2, #16]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	000186a0 	.word	0x000186a0
 800275c:	001e847f 	.word	0x001e847f
 8002760:	003d08ff 	.word	0x003d08ff
 8002764:	431bde83 	.word	0x431bde83
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
 800277c:	4613      	mov	r3, r2
 800277e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7fe ffd2 	bl	8001728 <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	f040 80e0 	bne.w	8002954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	4970      	ldr	r1, [pc, #448]	@ (8002960 <HAL_I2C_Master_Transmit+0x1f4>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f964 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0d3      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_I2C_Master_Transmit+0x50>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0cc      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d007      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2210      	movs	r2, #16
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	893a      	ldrh	r2, [r7, #8]
 8002812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a50      	ldr	r2, [pc, #320]	@ (8002964 <HAL_I2C_Master_Transmit+0x1f8>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f89c 	bl	8002968 <I2C_MasterRequestWrite>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e08d      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002850:	e066      	b.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	6a39      	ldr	r1, [r7, #32]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa22 	bl	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	2b04      	cmp	r3, #4
 8002868:	d107      	bne.n	800287a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06b      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d11b      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d017      	beq.n	80028f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa19 	bl	8002d30 <I2C_WaitOnBTFFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2b04      	cmp	r3, #4
 800290a:	d107      	bne.n	800291c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e01a      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d194      	bne.n	8002852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	00100002 	.word	0x00100002
 8002964:	ffff0000 	.word	0xffff0000

08002968 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d006      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d003      	beq.n	8002992 <I2C_MasterRequestWrite+0x2a>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002990:	d108      	bne.n	80029a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e00b      	b.n	80029bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d107      	bne.n	80029bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f84f 	bl	8002a6c <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e2:	d103      	bne.n	80029ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e035      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e01b      	b.n	8002a44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a0c:	897b      	ldrh	r3, [r7, #10]
 8002a0e:	11db      	asrs	r3, r3, #7
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0306 	and.w	r3, r3, #6
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f063 030f 	orn	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <I2C_MasterRequestWrite+0xfc>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f898 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e010      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4907      	ldr	r1, [pc, #28]	@ (8002a68 <I2C_MasterRequestWrite+0x100>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f888 	bl	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010008 	.word	0x00010008
 8002a68:	00010002 	.word	0x00010002

08002a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	e048      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d044      	beq.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fe4f 	bl	8001728 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d139      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10d      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	e00c      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4013      	ands	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d116      	bne.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e023      	b.n	8002b58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	e00c      	b.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d093      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6e:	e071      	b.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d123      	bne.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e067      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d041      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fdaa 	bl	8001728 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e00b      	b.n	8002c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	43da      	mvns	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e021      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10c      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	43da      	mvns	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e00b      	b.n	8002c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af6d 	bne.w	8002b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cac:	e034      	b.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f886 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e034      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d028      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7fe fd2f 	bl	8001728 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	2b80      	cmp	r3, #128	@ 0x80
 8002ce8:	d016      	beq.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b80      	cmp	r3, #128	@ 0x80
 8002d24:	d1c3      	bne.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f83e 	bl	8002dc0 <I2C_IsAcknowledgeFailed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e034      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d028      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fce7 	bl	8001728 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d016      	beq.n	8002da8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0220 	orr.w	r2, r3, #32
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d1c3      	bne.n	8002d3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d11b      	bne.n	8002e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e272      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8087 	beq.w	8002f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d00c      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e48:	4b8f      	ldr	r3, [pc, #572]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d112      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
 8002e54:	4b8c      	ldr	r3, [pc, #560]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e62:	4b89      	ldr	r3, [pc, #548]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d06c      	beq.n	8002f48 <HAL_RCC_OscConfig+0x12c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d168      	bne.n	8002f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e24c      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x76>
 8002e84:	4b80      	ldr	r3, [pc, #512]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7f      	ldr	r2, [pc, #508]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	e02e      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b78      	ldr	r3, [pc, #480]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a77      	ldr	r2, [pc, #476]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e01d      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xbc>
 8002ebe:	4b72      	ldr	r3, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a71      	ldr	r2, [pc, #452]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd4>
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b68      	ldr	r3, [pc, #416]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a67      	ldr	r2, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fc16 	bl	8001728 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe fc12 	bl	8001728 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	@ 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e200      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b5d      	ldr	r3, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe4>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fc02 	bl	8001728 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f28:	f7fe fbfe 	bl	8001728 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	@ 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e1ec      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3a:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x10c>
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d063      	beq.n	800301e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f56:	4b4c      	ldr	r3, [pc, #304]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f62:	4b49      	ldr	r3, [pc, #292]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
 8002f6e:	4b46      	ldr	r3, [pc, #280]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d116      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1c0      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b3d      	ldr	r3, [pc, #244]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4939      	ldr	r1, [pc, #228]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa6:	e03a      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb0:	4b36      	ldr	r3, [pc, #216]	@ (800308c <HAL_RCC_OscConfig+0x270>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fbb7 	bl	8001728 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fbb3 	bl	8001728 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e1a1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4927      	ldr	r1, [pc, #156]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	e015      	b.n	800301e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <HAL_RCC_OscConfig+0x270>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb96 	bl	8001728 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fb92 	bl	8001728 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e180      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03a      	beq.n	80030a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fb76 	bl	8001728 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fb72 	bl	8001728 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e160      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <HAL_RCC_OscConfig+0x26c>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 fafe 	bl	8003660 <RCC_Delay>
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003066:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <HAL_RCC_OscConfig+0x274>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe fb5c 	bl	8001728 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003072:	e00f      	b.n	8003094 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fe fb58 	bl	8001728 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d908      	bls.n	8003094 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e146      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	42420000 	.word	0x42420000
 8003090:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	4b92      	ldr	r3, [pc, #584]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e9      	bne.n	8003074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a6 	beq.w	80031fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b8b      	ldr	r3, [pc, #556]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a87      	ldr	r2, [pc, #540]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]
 80030ca:	4b85      	ldr	r3, [pc, #532]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b82      	ldr	r3, [pc, #520]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b7f      	ldr	r3, [pc, #508]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fb19 	bl	8001728 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7fe fb15 	bl	8001728 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	@ 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e103      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	4b75      	ldr	r3, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x4c8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x312>
 8003120:	4b6f      	ldr	r3, [pc, #444]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a6e      	ldr	r2, [pc, #440]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	e02d      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003136:	4b6a      	ldr	r3, [pc, #424]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a69      	ldr	r2, [pc, #420]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	6213      	str	r3, [r2, #32]
 8003142:	4b67      	ldr	r3, [pc, #412]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x356>
 8003158:	4b61      	ldr	r3, [pc, #388]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4a60      	ldr	r2, [pc, #384]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6213      	str	r3, [r2, #32]
 8003164:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x36e>
 8003172:	4b5b      	ldr	r3, [pc, #364]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a5a      	ldr	r2, [pc, #360]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	4b58      	ldr	r3, [pc, #352]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a57      	ldr	r2, [pc, #348]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fe fac9 	bl	8001728 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe fac5 	bl	8001728 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0b1      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b4b      	ldr	r3, [pc, #300]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x37e>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe fab3 	bl	8001728 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fe faaf 	bl	8001728 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e09b      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b3c      	ldr	r3, [pc, #240]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a3b      	ldr	r2, [pc, #236]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8087 	beq.w	8003312 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003204:	4b36      	ldr	r3, [pc, #216]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d061      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d146      	bne.n	80032a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b33      	ldr	r3, [pc, #204]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe fa83 	bl	8001728 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fe fa7f 	bl	8001728 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e06d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003238:	4b29      	ldr	r3, [pc, #164]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d108      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4921      	ldr	r1, [pc, #132]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003260:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a19      	ldr	r1, [r3, #32]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	430b      	orrs	r3, r1
 8003272:	491b      	ldr	r1, [pc, #108]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327e:	f7fe fa53 	bl	8001728 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003286:	f7fe fa4f 	bl	8001728 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003298:	4b11      	ldr	r3, [pc, #68]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x46a>
 80032a4:	e035      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fe fa3c 	bl	8001728 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fa38 	bl	8001728 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e026      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x498>
 80032d2:	e01e      	b.n	8003312 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e019      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x500>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0d0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d910      	bls.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b67      	ldr	r3, [pc, #412]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4965      	ldr	r1, [pc, #404]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b63      	ldr	r3, [pc, #396]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0b8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800337c:	4b59      	ldr	r3, [pc, #356]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a58      	ldr	r2, [pc, #352]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003386:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4a52      	ldr	r2, [pc, #328]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800339e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b50      	ldr	r3, [pc, #320]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	494d      	ldr	r1, [pc, #308]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e07f      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b41      	ldr	r3, [pc, #260]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b39      	ldr	r3, [pc, #228]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4936      	ldr	r1, [pc, #216]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fe f98a 	bl	8001728 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe f986 	bl	8001728 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e053      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2d      	ldr	r3, [pc, #180]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b27      	ldr	r3, [pc, #156]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d210      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 0207 	bic.w	r2, r3, #7
 8003456:	4922      	ldr	r1, [pc, #136]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345e:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d001      	beq.n	8003470 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e032      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4916      	ldr	r1, [pc, #88]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	490e      	ldr	r1, [pc, #56]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ae:	f000 f821 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b0b      	ldr	r3, [pc, #44]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	490a      	ldr	r1, [pc, #40]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1cc>)
 80034c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_ClockConfig+0x1d0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe f840 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	080059dc 	.word	0x080059dc
 80034ec:	20000008 	.word	0x20000008
 80034f0:	2000000c 	.word	0x2000000c

080034f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800350e:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x94>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x30>
 800351e:	2b08      	cmp	r3, #8
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x36>
 8003522:	e027      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003526:	613b      	str	r3, [r7, #16]
      break;
 8003528:	e027      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0c9b      	lsrs	r3, r3, #18
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x94>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0c5b      	lsrs	r3, r3, #17
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_RCC_GetSysClockFreq+0xa0>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003556:	fb03 f202 	mul.w	r2, r3, r2
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e004      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a0c      	ldr	r2, [pc, #48]	@ (8003598 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	613b      	str	r3, [r7, #16]
      break;
 8003572:	e002      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetSysClockFreq+0x98>)
 8003576:	613b      	str	r3, [r7, #16]
      break;
 8003578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357a:	693b      	ldr	r3, [r7, #16]
}
 800357c:	4618      	mov	r0, r3
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	080059f4 	.word	0x080059f4
 8003594:	08005a04 	.word	0x08005a04
 8003598:	003d0900 	.word	0x003d0900

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <HAL_RCC_GetHCLKFreq+0x10>)
 80035a2:	681b      	ldr	r3, [r3, #0]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	20000008 	.word	0x20000008

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff2 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	@ (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	080059ec 	.word	0x080059ec

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffde 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0adb      	lsrs	r3, r3, #11
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	@ (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	080059ec 	.word	0x080059ec

08003600 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	220f      	movs	r2, #15
 800360e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_RCC_GetClockConfig+0x58>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <HAL_RCC_GetClockConfig+0x58>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCC_GetClockConfig+0x58>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <HAL_RCC_GetClockConfig+0x58>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	08db      	lsrs	r3, r3, #3
 800363a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_GetClockConfig+0x5c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	40022000 	.word	0x40022000

08003660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <RCC_Delay+0x34>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <RCC_Delay+0x38>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a5b      	lsrs	r3, r3, #9
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800367c:	bf00      	nop
  }
  while (Delay --);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <RCC_Delay+0x1c>
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000008 	.word	0x20000008
 8003698:	10624dd3 	.word	0x10624dd3

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d07d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036bc:	4b4f      	ldr	r3, [pc, #316]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b4c      	ldr	r3, [pc, #304]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a4b      	ldr	r2, [pc, #300]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
 80036d4:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	4b46      	ldr	r3, [pc, #280]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f0:	4b43      	ldr	r3, [pc, #268]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a42      	ldr	r2, [pc, #264]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fc:	f7fe f814 	bl	8001728 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	e008      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fe f810 	bl	8001728 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e06d      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003722:	4b36      	ldr	r3, [pc, #216]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d02e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d027      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003748:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800374a:	4b2e      	ldr	r3, [pc, #184]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003750:	4b2c      	ldr	r3, [pc, #176]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003756:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fd ffdf 	bl	8001728 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd ffdb 	bl	8001728 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e036      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003790:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4917      	ldr	r1, [pc, #92]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	490b      	ldr	r1, [pc, #44]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	4904      	ldr	r1, [pc, #16]	@ (80037fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	42420440 	.word	0x42420440

08003808 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b10      	cmp	r3, #16
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b10      	cmp	r3, #16
 800382e:	f200 808a 	bhi.w	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d045      	beq.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d075      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800383e:	e082      	b.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003840:	4b46      	ldr	r3, [pc, #280]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003846:	4b45      	ldr	r3, [pc, #276]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07b      	beq.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	0c9b      	lsrs	r3, r3, #18
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	4a41      	ldr	r2, [pc, #260]	@ (8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800386a:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0c5b      	lsrs	r3, r3, #17
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	4a3b      	ldr	r2, [pc, #236]	@ (8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003884:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fbb2 f2f3 	udiv	r2, r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	fb02 f303 	mul.w	r3, r2, r3
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4a34      	ldr	r2, [pc, #208]	@ (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038a0:	4b2e      	ldr	r3, [pc, #184]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ac:	d102      	bne.n	80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	61bb      	str	r3, [r7, #24]
      break;
 80038b2:	e04a      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	61bb      	str	r3, [r7, #24]
      break;
 80038c2:	e042      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d4:	d108      	bne.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	e01f      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038f2:	d109      	bne.n	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003900:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e00f      	b.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003912:	d11c      	bne.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003920:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003924:	61bb      	str	r3, [r7, #24]
      break;
 8003926:	e012      	b.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003928:	e011      	b.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800392a:	f7ff fe55 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0b9b      	lsrs	r3, r3, #14
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	61bb      	str	r3, [r7, #24]
      break;
 8003944:	e004      	b.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003946:	bf00      	nop
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800394e:	bf00      	nop
    }
  }
  return (frequency);
 8003950:	69bb      	ldr	r3, [r7, #24]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	08005a08 	.word	0x08005a08
 8003964:	08005a18 	.word	0x08005a18
 8003968:	007a1200 	.word	0x007a1200
 800396c:	003d0900 	.word	0x003d0900
 8003970:	aaaaaaab 	.word	0xaaaaaaab

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f839 	bl	8003a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 f99c 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e03a      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_TIM_Base_Start_IT+0x98>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x58>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d009      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x58>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIM_Base_Start_IT+0x58>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d010      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e007      	b.n	8003ab0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800

08003ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0202 	mvn.w	r2, #2
 8003afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8d1 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8c4 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8d3 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0304 	and.w	r3, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d020      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0204 	mvn.w	r2, #4
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8ab 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f89e 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8ad 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0208 	mvn.w	r2, #8
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f885 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f878 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f887 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d020      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f85f 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f852 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f861 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0201 	mvn.w	r2, #1
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fb50 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8c3 	bl	8003dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f831 	bl	8003cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0220 	mvn.w	r2, #32
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f896 	bl	8003dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc0 <TIM_Base_SetConfig+0xd0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d007      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <TIM_Base_SetConfig+0xd4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc8 <TIM_Base_SetConfig+0xd8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a22      	ldr	r2, [pc, #136]	@ (8003dc0 <TIM_Base_SetConfig+0xd0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc4 <TIM_Base_SetConfig+0xd4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <TIM_Base_SetConfig+0xd8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003dc0 <TIM_Base_SetConfig+0xd0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]
  }
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	40012c00 	.word	0x40012c00
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000800 	.word	0x40000800

08003dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd fb50 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f971 	bl	800411c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	@ 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d175      	bne.n	8003f9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Transmit+0x2c>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e06e      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2221      	movs	r2, #33	@ 0x21
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ece:	f7fd fc2b 	bl	8001728 <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f04:	e02e      	b.n	8003f64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f848 	bl	8003fa6 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e03a      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e007      	b.n	8003f56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1cb      	bne.n	8003f06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2140      	movs	r1, #64	@ 0x40
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f814 	bl	8003fa6 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb6:	e03b      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d037      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fd fbb2 	bl	8001728 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	6a3a      	ldr	r2, [r7, #32]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03a      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d020      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d01d      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d116      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f81d 	bl	8004058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2208      	movs	r2, #8
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e00f      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d0b4      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b095      	sub	sp, #84	@ 0x54
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004080:	643a      	str	r2, [r7, #64]	@ 0x40
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d119      	bne.n	8004104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f0:	61ba      	str	r2, [r7, #24]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004112:	bf00      	nop
 8004114:	3754      	adds	r7, #84	@ 0x54
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004156:	f023 030c 	bic.w	r3, r3, #12
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	430b      	orrs	r3, r1
 8004162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <UART_SetConfig+0x114>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d103      	bne.n	800418c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004184:	f7ff fa28 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	e002      	b.n	8004192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800418c:	f7ff fa10 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8004190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <UART_SetConfig+0x118>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	0119      	lsls	r1, r3, #4
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <UART_SetConfig+0x118>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	@ 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	@ 0x32
 80041dc:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <UART_SetConfig+0x118>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e8:	4419      	add	r1, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009a      	lsls	r2, r3, #2
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004200:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <UART_SetConfig+0x118>)
 8004202:	fba3 0302 	umull	r0, r3, r3, r2
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2064      	movs	r0, #100	@ 0x64
 800420a:	fb00 f303 	mul.w	r3, r0, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	3332      	adds	r3, #50	@ 0x32
 8004214:	4a07      	ldr	r2, [pc, #28]	@ (8004234 <UART_SetConfig+0x118>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	440a      	add	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004228:	bf00      	nop
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40013800 	.word	0x40013800
 8004234:	51eb851f 	.word	0x51eb851f

08004238 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424a:	2b84      	cmp	r3, #132	@ 0x84
 800424c:	d005      	beq.n	800425a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800424e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4413      	add	r3, r2
 8004256:	3303      	adds	r3, #3
 8004258:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800426a:	f000 faf7 	bl	800485c <vTaskStartScheduler>
  
  return osOK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}

08004274 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af04      	add	r7, sp, #16
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <osThreadCreate+0x54>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01c      	beq.n	80042c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685c      	ldr	r4, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691e      	ldr	r6, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffc9 	bl	8004238 <makeFreeRtosPriority>
 80042a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b0:	9202      	str	r2, [sp, #8]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9100      	str	r1, [sp, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4632      	mov	r2, r6
 80042ba:	4629      	mov	r1, r5
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 f8e8 	bl	8004492 <xTaskCreateStatic>
 80042c2:	4603      	mov	r3, r0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e01c      	b.n	8004302 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685c      	ldr	r4, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ffab 	bl	8004238 <makeFreeRtosPriority>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	9200      	str	r2, [sp, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4632      	mov	r2, r6
 80042f0:	4629      	mov	r1, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 f92d 	bl	8004552 <xTaskCreate>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d001      	beq.n	8004302 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800430c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <osDelay+0x16>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	e000      	b.n	8004324 <osDelay+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa63 	bl	80047f0 <vTaskDelay>
  
  return osOK;
 800432a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f103 0208 	add.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 0208 	add.w	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f103 0208 	add.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d103      	bne.n	80043f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	e00c      	b.n	800440a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3308      	adds	r3, #8
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e002      	b.n	80043fe <vListInsert+0x2e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	d2f6      	bcs.n	80043f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6892      	ldr	r2, [r2, #8]
 8004456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6852      	ldr	r2, [r2, #4]
 8004460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d103      	bne.n	8004474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	1e5a      	subs	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08e      	sub	sp, #56	@ 0x38
 8004496:	af04      	add	r7, sp, #16
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <xTaskCreateStatic+0x4a>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	61fb      	str	r3, [r7, #28]
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044dc:	23a0      	movs	r3, #160	@ 0xa0
 80044de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80044e4:	d00b      	beq.n	80044fe <xTaskCreateStatic+0x6c>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	61bb      	str	r3, [r7, #24]
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01e      	beq.n	8004544 <xTaskCreateStatic+0xb2>
 8004506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	2202      	movs	r2, #2
 800451a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800451e:	2300      	movs	r3, #0
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f850 	bl	80045dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800453c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800453e:	f000 f8ed 	bl	800471c <prvAddNewTaskToReadyList>
 8004542:	e001      	b.n	8004548 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004548:	697b      	ldr	r3, [r7, #20]
	}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	@ 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004552:	b580      	push	{r7, lr}
 8004554:	b08c      	sub	sp, #48	@ 0x30
 8004556:	af04      	add	r7, sp, #16
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fea2 	bl	80052b0 <pvPortMalloc>
 800456c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004574:	20a0      	movs	r0, #160	@ 0xa0
 8004576:	f000 fe9b 	bl	80052b0 <pvPortMalloc>
 800457a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
 8004588:	e005      	b.n	8004596 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f000 ff5e 	bl	800544c <vPortFree>
 8004590:	e001      	b.n	8004596 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d017      	beq.n	80045cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	2300      	movs	r3, #0
 80045a8:	9303      	str	r3, [sp, #12]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	9302      	str	r3, [sp, #8]
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f80e 	bl	80045dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045c0:	69f8      	ldr	r0, [r7, #28]
 80045c2:	f000 f8ab 	bl	800471c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	e002      	b.n	80045d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045d2:	69bb      	ldr	r3, [r7, #24]
	}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045f4:	3b01      	subs	r3, #1
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	617b      	str	r3, [r7, #20]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01f      	beq.n	800466c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	e012      	b.n	8004658 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	7819      	ldrb	r1, [r3, #0]
 800463a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	3334      	adds	r3, #52	@ 0x34
 8004642:	460a      	mov	r2, r1
 8004644:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d006      	beq.n	8004660 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	d9e9      	bls.n	8004632 <prvInitialiseNewTask+0x56>
 800465e:	e000      	b.n	8004662 <prvInitialiseNewTask+0x86>
			{
				break;
 8004660:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800466a:	e003      	b.n	8004674 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2b06      	cmp	r3, #6
 8004678:	d901      	bls.n	800467e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800467a:	2306      	movs	r3, #6
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004682:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	2200      	movs	r2, #0
 800468e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	3304      	adds	r3, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fe6c 	bl	8004372 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	3318      	adds	r3, #24
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fe67 	bl	8004372 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	f1c3 0207 	rsb	r2, r3, #7
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046cc:	334c      	adds	r3, #76	@ 0x4c
 80046ce:	224c      	movs	r2, #76	@ 0x4c
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ffd8 	bl	8005688 <memset>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	4a0d      	ldr	r2, [pc, #52]	@ (8004710 <prvInitialiseNewTask+0x134>)
 80046dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <prvInitialiseNewTask+0x138>)
 80046e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004718 <prvInitialiseNewTask+0x13c>)
 80046e8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	69b8      	ldr	r0, [r7, #24]
 80046f0:	f000 fc28 	bl	8004f44 <pxPortInitialiseStack>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004706:	bf00      	nop
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200011e8 	.word	0x200011e8
 8004714:	20001250 	.word	0x20001250
 8004718:	200012b8 	.word	0x200012b8

0800471c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004724:	f000 fd02 	bl	800512c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <prvAddNewTaskToReadyList+0xb8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	4a29      	ldr	r2, [pc, #164]	@ (80047d4 <prvAddNewTaskToReadyList+0xb8>)
 8004730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <prvAddNewTaskToReadyList+0xbc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800473a:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <prvAddNewTaskToReadyList+0xbc>)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004740:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <prvAddNewTaskToReadyList+0xb8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d110      	bne.n	800476a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004748:	f000 fad2 	bl	8004cf0 <prvInitialiseTaskLists>
 800474c:	e00d      	b.n	800476a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800474e:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <prvAddNewTaskToReadyList+0xc0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <prvAddNewTaskToReadyList+0xbc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	429a      	cmp	r2, r3
 8004762:	d802      	bhi.n	800476a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <prvAddNewTaskToReadyList+0xbc>)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800476a:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <prvAddNewTaskToReadyList+0xc4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3301      	adds	r3, #1
 8004770:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <prvAddNewTaskToReadyList+0xc4>)
 8004772:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	2201      	movs	r2, #1
 800477a:	409a      	lsls	r2, r3
 800477c:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <prvAddNewTaskToReadyList+0xc8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4313      	orrs	r3, r2
 8004782:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <prvAddNewTaskToReadyList+0xc8>)
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a15      	ldr	r2, [pc, #84]	@ (80047e8 <prvAddNewTaskToReadyList+0xcc>)
 8004794:	441a      	add	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7ff fdf4 	bl	800438a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047a2:	f000 fcf3 	bl	800518c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <prvAddNewTaskToReadyList+0xc0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00e      	beq.n	80047cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <prvAddNewTaskToReadyList+0xbc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d207      	bcs.n	80047cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047bc:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <prvAddNewTaskToReadyList+0xd0>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000594 	.word	0x20000594
 80047d8:	20000494 	.word	0x20000494
 80047dc:	200005a0 	.word	0x200005a0
 80047e0:	200005b0 	.word	0x200005b0
 80047e4:	2000059c 	.word	0x2000059c
 80047e8:	20000498 	.word	0x20000498
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004802:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <vTaskDelay+0x64>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <vTaskDelay+0x32>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60bb      	str	r3, [r7, #8]
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	e7fd      	b.n	800481e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004822:	f000 f885 	bl	8004930 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004826:	2100      	movs	r1, #0
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb25 	bl	8004e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800482e:	f000 f88d 	bl	800494c <xTaskResumeAll>
 8004832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800483a:	4b07      	ldr	r3, [pc, #28]	@ (8004858 <vTaskDelay+0x68>)
 800483c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	200005bc 	.word	0x200005bc
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800486a:	463a      	mov	r2, r7
 800486c:	1d39      	adds	r1, r7, #4
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	4618      	mov	r0, r3
 8004874:	f7fb fc6c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	9202      	str	r2, [sp, #8]
 8004880:	9301      	str	r3, [sp, #4]
 8004882:	2300      	movs	r3, #0
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2300      	movs	r3, #0
 8004888:	460a      	mov	r2, r1
 800488a:	4921      	ldr	r1, [pc, #132]	@ (8004910 <vTaskStartScheduler+0xb4>)
 800488c:	4821      	ldr	r0, [pc, #132]	@ (8004914 <vTaskStartScheduler+0xb8>)
 800488e:	f7ff fe00 	bl	8004492 <xTaskCreateStatic>
 8004892:	4603      	mov	r3, r0
 8004894:	4a20      	ldr	r2, [pc, #128]	@ (8004918 <vTaskStartScheduler+0xbc>)
 8004896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004898:	4b1f      	ldr	r3, [pc, #124]	@ (8004918 <vTaskStartScheduler+0xbc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048a0:	2301      	movs	r3, #1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e001      	b.n	80048aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d11b      	bne.n	80048e8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048c4:	4b15      	ldr	r3, [pc, #84]	@ (800491c <vTaskStartScheduler+0xc0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <vTaskStartScheduler+0xc4>)
 80048cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048ce:	4b15      	ldr	r3, [pc, #84]	@ (8004924 <vTaskStartScheduler+0xc8>)
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295
 80048d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <vTaskStartScheduler+0xcc>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048dc:	4b13      	ldr	r3, [pc, #76]	@ (800492c <vTaskStartScheduler+0xd0>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e2:	f000 fbb1 	bl	8005048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e6:	e00f      	b.n	8004908 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d10b      	bne.n	8004908 <vTaskStartScheduler+0xac>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <vTaskStartScheduler+0xa8>
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	080059d4 	.word	0x080059d4
 8004914:	08004cc1 	.word	0x08004cc1
 8004918:	200005b8 	.word	0x200005b8
 800491c:	20000494 	.word	0x20000494
 8004920:	20000018 	.word	0x20000018
 8004924:	200005b4 	.word	0x200005b4
 8004928:	200005a0 	.word	0x200005a0
 800492c:	20000598 	.word	0x20000598

08004930 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <vTaskSuspendAll+0x18>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	4a03      	ldr	r2, [pc, #12]	@ (8004948 <vTaskSuspendAll+0x18>)
 800493c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200005bc 	.word	0x200005bc

0800494c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800495a:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <xTaskResumeAll+0x118>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <xTaskResumeAll+0x2e>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	603b      	str	r3, [r7, #0]
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800497a:	f000 fbd7 	bl	800512c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800497e:	4b39      	ldr	r3, [pc, #228]	@ (8004a64 <xTaskResumeAll+0x118>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3b01      	subs	r3, #1
 8004984:	4a37      	ldr	r2, [pc, #220]	@ (8004a64 <xTaskResumeAll+0x118>)
 8004986:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004988:	4b36      	ldr	r3, [pc, #216]	@ (8004a64 <xTaskResumeAll+0x118>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d161      	bne.n	8004a54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004990:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <xTaskResumeAll+0x11c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05d      	beq.n	8004a54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004998:	e02e      	b.n	80049f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499a:	4b34      	ldr	r3, [pc, #208]	@ (8004a6c <xTaskResumeAll+0x120>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd4a 	bl	8004440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fd45 	bl	8004440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	2201      	movs	r2, #1
 80049bc:	409a      	lsls	r2, r3
 80049be:	4b2c      	ldr	r3, [pc, #176]	@ (8004a70 <xTaskResumeAll+0x124>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a70 <xTaskResumeAll+0x124>)
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4a27      	ldr	r2, [pc, #156]	@ (8004a74 <xTaskResumeAll+0x128>)
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3304      	adds	r3, #4
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7ff fcd3 	bl	800438a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e8:	4b23      	ldr	r3, [pc, #140]	@ (8004a78 <xTaskResumeAll+0x12c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049f2:	4b22      	ldr	r3, [pc, #136]	@ (8004a7c <xTaskResumeAll+0x130>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049f8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a6c <xTaskResumeAll+0x120>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1cc      	bne.n	800499a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a06:	f000 fa17 	bl	8004e38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <xTaskResumeAll+0x134>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d010      	beq.n	8004a38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a16:	f000 f837 	bl	8004a88 <xTaskIncrementTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a20:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <xTaskResumeAll+0x130>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f1      	bne.n	8004a16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a32:	4b13      	ldr	r3, [pc, #76]	@ (8004a80 <xTaskResumeAll+0x134>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a38:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <xTaskResumeAll+0x130>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a44:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <xTaskResumeAll+0x138>)
 8004a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a54:	f000 fb9a 	bl	800518c <vPortExitCritical>

	return xAlreadyYielded;
 8004a58:	68bb      	ldr	r3, [r7, #8]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200005bc 	.word	0x200005bc
 8004a68:	20000594 	.word	0x20000594
 8004a6c:	20000554 	.word	0x20000554
 8004a70:	2000059c 	.word	0x2000059c
 8004a74:	20000498 	.word	0x20000498
 8004a78:	20000494 	.word	0x20000494
 8004a7c:	200005a8 	.word	0x200005a8
 8004a80:	200005a4 	.word	0x200005a4
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a92:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd0 <xTaskIncrementTick+0x148>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 808f 	bne.w	8004bba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd4 <xTaskIncrementTick+0x14c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8004bd4 <xTaskIncrementTick+0x14c>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d121      	bne.n	8004af4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ab0:	4b49      	ldr	r3, [pc, #292]	@ (8004bd8 <xTaskIncrementTick+0x150>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00b      	beq.n	8004ad2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	603b      	str	r3, [r7, #0]
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	e7fd      	b.n	8004ace <xTaskIncrementTick+0x46>
 8004ad2:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <xTaskIncrementTick+0x150>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	4b40      	ldr	r3, [pc, #256]	@ (8004bdc <xTaskIncrementTick+0x154>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd8 <xTaskIncrementTick+0x150>)
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bdc <xTaskIncrementTick+0x154>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8004be0 <xTaskIncrementTick+0x158>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	4a3c      	ldr	r2, [pc, #240]	@ (8004be0 <xTaskIncrementTick+0x158>)
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	f000 f9a2 	bl	8004e38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004af4:	4b3b      	ldr	r3, [pc, #236]	@ (8004be4 <xTaskIncrementTick+0x15c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d348      	bcc.n	8004b90 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afe:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <xTaskIncrementTick+0x150>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b08:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <xTaskIncrementTick+0x15c>)
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	601a      	str	r2, [r3, #0]
					break;
 8004b10:	e03e      	b.n	8004b90 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b12:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <xTaskIncrementTick+0x150>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004be4 <xTaskIncrementTick+0x15c>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b30:	e02e      	b.n	8004b90 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fc82 	bl	8004440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3318      	adds	r3, #24
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff fc79 	bl	8004440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b52:	2201      	movs	r2, #1
 8004b54:	409a      	lsls	r2, r3
 8004b56:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <xTaskIncrementTick+0x160>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	4a22      	ldr	r2, [pc, #136]	@ (8004be8 <xTaskIncrementTick+0x160>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <xTaskIncrementTick+0x164>)
 8004b6e:	441a      	add	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7ff fc07 	bl	800438a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <xTaskIncrementTick+0x168>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3b9      	bcc.n	8004afe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b8e:	e7b6      	b.n	8004afe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b90:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <xTaskIncrementTick+0x168>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b96:	4915      	ldr	r1, [pc, #84]	@ (8004bec <xTaskIncrementTick+0x164>)
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d901      	bls.n	8004bac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <xTaskIncrementTick+0x16c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e004      	b.n	8004bc4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bba:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <xTaskIncrementTick+0x170>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf8 <xTaskIncrementTick+0x170>)
 8004bc2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bc4:	697b      	ldr	r3, [r7, #20]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200005bc 	.word	0x200005bc
 8004bd4:	20000598 	.word	0x20000598
 8004bd8:	2000054c 	.word	0x2000054c
 8004bdc:	20000550 	.word	0x20000550
 8004be0:	200005ac 	.word	0x200005ac
 8004be4:	200005b4 	.word	0x200005b4
 8004be8:	2000059c 	.word	0x2000059c
 8004bec:	20000498 	.word	0x20000498
 8004bf0:	20000494 	.word	0x20000494
 8004bf4:	200005a8 	.word	0x200005a8
 8004bf8:	200005a4 	.word	0x200005a4

08004bfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c02:	4b29      	ldr	r3, [pc, #164]	@ (8004ca8 <vTaskSwitchContext+0xac>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <vTaskSwitchContext+0xb0>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c10:	e045      	b.n	8004c9e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <vTaskSwitchContext+0xb0>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c18:	4b25      	ldr	r3, [pc, #148]	@ (8004cb0 <vTaskSwitchContext+0xb4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	f1c3 031f 	rsb	r3, r3, #31
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	4921      	ldr	r1, [pc, #132]	@ (8004cb4 <vTaskSwitchContext+0xb8>)
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	607b      	str	r3, [r7, #4]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <vTaskSwitchContext+0x5a>
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a13      	ldr	r2, [pc, #76]	@ (8004cb4 <vTaskSwitchContext+0xb8>)
 8004c66:	4413      	add	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d104      	bne.n	8004c8a <vTaskSwitchContext+0x8e>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <vTaskSwitchContext+0xbc>)
 8004c92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c94:	4b08      	ldr	r3, [pc, #32]	@ (8004cb8 <vTaskSwitchContext+0xbc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	334c      	adds	r3, #76	@ 0x4c
 8004c9a:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <vTaskSwitchContext+0xc0>)
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	200005bc 	.word	0x200005bc
 8004cac:	200005a8 	.word	0x200005a8
 8004cb0:	2000059c 	.word	0x2000059c
 8004cb4:	20000498 	.word	0x20000498
 8004cb8:	20000494 	.word	0x20000494
 8004cbc:	20000018 	.word	0x20000018

08004cc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc8:	f000 f852 	bl	8004d70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ccc:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <prvIdleTask+0x28>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d9f9      	bls.n	8004cc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cd4:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <prvIdleTask+0x2c>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ce4:	e7f0      	b.n	8004cc8 <prvIdleTask+0x8>
 8004ce6:	bf00      	nop
 8004ce8:	20000498 	.word	0x20000498
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	e00c      	b.n	8004d16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a12      	ldr	r2, [pc, #72]	@ (8004d50 <prvInitialiseTaskLists+0x60>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fb12 	bl	8004334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3301      	adds	r3, #1
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b06      	cmp	r3, #6
 8004d1a:	d9ef      	bls.n	8004cfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d1c:	480d      	ldr	r0, [pc, #52]	@ (8004d54 <prvInitialiseTaskLists+0x64>)
 8004d1e:	f7ff fb09 	bl	8004334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d22:	480d      	ldr	r0, [pc, #52]	@ (8004d58 <prvInitialiseTaskLists+0x68>)
 8004d24:	f7ff fb06 	bl	8004334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d28:	480c      	ldr	r0, [pc, #48]	@ (8004d5c <prvInitialiseTaskLists+0x6c>)
 8004d2a:	f7ff fb03 	bl	8004334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d2e:	480c      	ldr	r0, [pc, #48]	@ (8004d60 <prvInitialiseTaskLists+0x70>)
 8004d30:	f7ff fb00 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d34:	480b      	ldr	r0, [pc, #44]	@ (8004d64 <prvInitialiseTaskLists+0x74>)
 8004d36:	f7ff fafd 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <prvInitialiseTaskLists+0x78>)
 8004d3c:	4a05      	ldr	r2, [pc, #20]	@ (8004d54 <prvInitialiseTaskLists+0x64>)
 8004d3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <prvInitialiseTaskLists+0x7c>)
 8004d42:	4a05      	ldr	r2, [pc, #20]	@ (8004d58 <prvInitialiseTaskLists+0x68>)
 8004d44:	601a      	str	r2, [r3, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000498 	.word	0x20000498
 8004d54:	20000524 	.word	0x20000524
 8004d58:	20000538 	.word	0x20000538
 8004d5c:	20000554 	.word	0x20000554
 8004d60:	20000568 	.word	0x20000568
 8004d64:	20000580 	.word	0x20000580
 8004d68:	2000054c 	.word	0x2000054c
 8004d6c:	20000550 	.word	0x20000550

08004d70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d76:	e019      	b.n	8004dac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d78:	f000 f9d8 	bl	800512c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d7c:	4b10      	ldr	r3, [pc, #64]	@ (8004dc0 <prvCheckTasksWaitingTermination+0x50>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fb59 	bl	8004440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <prvCheckTasksWaitingTermination+0x54>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc4 <prvCheckTasksWaitingTermination+0x54>)
 8004d96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004da0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004da2:	f000 f9f3 	bl	800518c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f810 	bl	8004dcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <prvCheckTasksWaitingTermination+0x58>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e1      	bne.n	8004d78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000568 	.word	0x20000568
 8004dc4:	20000594 	.word	0x20000594
 8004dc8:	2000057c 	.word	0x2000057c

08004dcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	334c      	adds	r3, #76	@ 0x4c
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fc5d 	bl	8005698 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d108      	bne.n	8004dfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fb2d 	bl	800544c <vPortFree>
				vPortFree( pxTCB );
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fb2a 	bl	800544c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004df8:	e019      	b.n	8004e2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d103      	bne.n	8004e0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb21 	bl	800544c <vPortFree>
	}
 8004e0a:	e010      	b.n	8004e2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d00b      	beq.n	8004e2e <prvDeleteTCB+0x62>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60fb      	str	r3, [r7, #12]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <prvDeleteTCB+0x5e>
	}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <prvResetNextTaskUnblockTime+0x38>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	@ (8004e74 <prvResetNextTaskUnblockTime+0x3c>)
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e50:	e008      	b.n	8004e64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <prvResetNextTaskUnblockTime+0x38>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a04      	ldr	r2, [pc, #16]	@ (8004e74 <prvResetNextTaskUnblockTime+0x3c>)
 8004e62:	6013      	str	r3, [r2, #0]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	2000054c 	.word	0x2000054c
 8004e74:	200005b4 	.word	0x200005b4

08004e78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e82:	4b29      	ldr	r3, [pc, #164]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e88:	4b28      	ldr	r3, [pc, #160]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fad6 	bl	8004440 <uxListRemove>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	4b21      	ldr	r3, [pc, #132]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4013      	ands	r3, r2
 8004eae:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d10a      	bne.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	481a      	ldr	r0, [pc, #104]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004eca:	f7ff fa5e 	bl	800438a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ece:	e026      	b.n	8004f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ed8:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d209      	bcs.n	8004efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee8:	4b13      	ldr	r3, [pc, #76]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b0f      	ldr	r3, [pc, #60]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7ff fa6b 	bl	80043d0 <vListInsert>
}
 8004efa:	e010      	b.n	8004f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004efc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7ff fa61 	bl	80043d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d202      	bcs.n	8004f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f18:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	6013      	str	r3, [r2, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000598 	.word	0x20000598
 8004f2c:	20000494 	.word	0x20000494
 8004f30:	2000059c 	.word	0x2000059c
 8004f34:	20000580 	.word	0x20000580
 8004f38:	20000550 	.word	0x20000550
 8004f3c:	2000054c 	.word	0x2000054c
 8004f40:	200005b4 	.word	0x200005b4

08004f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f74:	4a08      	ldr	r2, [pc, #32]	@ (8004f98 <pxPortInitialiseStack+0x54>)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b14      	subs	r3, #20
 8004f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b20      	subs	r3, #32
 8004f8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	08004f9d 	.word	0x08004f9d

08004f9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fa6:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <prvTaskExitError+0x54>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d00b      	beq.n	8004fc8 <prvTaskExitError+0x2c>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60fb      	str	r3, [r7, #12]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <prvTaskExitError+0x28>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60bb      	str	r3, [r7, #8]
}
 8004fda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fdc:	bf00      	nop
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0fc      	beq.n	8004fde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	20000014 	.word	0x20000014
	...

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	f04e 0e0d 	orr.w	lr, lr, #13
 800501e:	4770      	bx	lr

08005020 <pxCurrentTCBConst2>:
 8005020:	20000494 	.word	0x20000494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005028:	4806      	ldr	r0, [pc, #24]	@ (8005044 <prvPortStartFirstTask+0x1c>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	b662      	cpsie	i
 8005034:	b661      	cpsie	f
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	df00      	svc	0
 8005040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005042:	bf00      	nop
 8005044:	e000ed08 	.word	0xe000ed08

08005048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800504e:	4b32      	ldr	r3, [pc, #200]	@ (8005118 <xPortStartScheduler+0xd0>)
 8005050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	22ff      	movs	r2, #255	@ 0xff
 800505e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4b2a      	ldr	r3, [pc, #168]	@ (800511c <xPortStartScheduler+0xd4>)
 8005074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005076:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <xPortStartScheduler+0xd8>)
 8005078:	2207      	movs	r2, #7
 800507a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507c:	e009      	b.n	8005092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800507e:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <xPortStartScheduler+0xd8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3b01      	subs	r3, #1
 8005084:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <xPortStartScheduler+0xd8>)
 8005086:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509a:	2b80      	cmp	r3, #128	@ 0x80
 800509c:	d0ef      	beq.n	800507e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800509e:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <xPortStartScheduler+0xd8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1c3 0307 	rsb	r3, r3, #7
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d00b      	beq.n	80050c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050c2:	4b17      	ldr	r3, [pc, #92]	@ (8005120 <xPortStartScheduler+0xd8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <xPortStartScheduler+0xd8>)
 80050ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050cc:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <xPortStartScheduler+0xd8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050d4:	4a12      	ldr	r2, [pc, #72]	@ (8005120 <xPortStartScheduler+0xd8>)
 80050d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050e0:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <xPortStartScheduler+0xdc>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <xPortStartScheduler+0xdc>)
 80050e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <xPortStartScheduler+0xdc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005124 <xPortStartScheduler+0xdc>)
 80050f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f8:	f000 f8b8 	bl	800526c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <xPortStartScheduler+0xe0>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005102:	f7ff ff91 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005106:	f7ff fd79 	bl	8004bfc <vTaskSwitchContext>
	prvTaskExitError();
 800510a:	f7ff ff47 	bl	8004f9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	e000e400 	.word	0xe000e400
 800511c:	200005c0 	.word	0x200005c0
 8005120:	200005c4 	.word	0x200005c4
 8005124:	e000ed20 	.word	0xe000ed20
 8005128:	20000014 	.word	0x20000014

0800512c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	607b      	str	r3, [r7, #4]
}
 8005144:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005146:	4b0f      	ldr	r3, [pc, #60]	@ (8005184 <vPortEnterCritical+0x58>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	4a0d      	ldr	r2, [pc, #52]	@ (8005184 <vPortEnterCritical+0x58>)
 800514e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005150:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <vPortEnterCritical+0x58>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d110      	bne.n	800517a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <vPortEnterCritical+0x5c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <vPortEnterCritical+0x4e>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	603b      	str	r3, [r7, #0]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <vPortEnterCritical+0x4a>
	}
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	20000014 	.word	0x20000014
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <vPortExitCritical+0x50>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <vPortExitCritical+0x26>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <vPortExitCritical+0x50>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4a08      	ldr	r2, [pc, #32]	@ (80051dc <vPortExitCritical+0x50>)
 80051ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051bc:	4b07      	ldr	r3, [pc, #28]	@ (80051dc <vPortExitCritical+0x50>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <vPortExitCritical+0x44>
 80051c4:	2300      	movs	r3, #0
 80051c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000014 	.word	0x20000014

080051e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051e0:	f3ef 8009 	mrs	r0, PSP
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <pxCurrentTCBConst>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051f0:	6010      	str	r0, [r2, #0]
 80051f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051fa:	f380 8811 	msr	BASEPRI, r0
 80051fe:	f7ff fcfd 	bl	8004bfc <vTaskSwitchContext>
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f380 8811 	msr	BASEPRI, r0
 800520a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005216:	f380 8809 	msr	PSP, r0
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	4770      	bx	lr

08005220 <pxCurrentTCBConst>:
 8005220:	20000494 	.word	0x20000494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop

08005228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005242:	f7ff fc21 	bl	8004a88 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <SysTick_Handler+0x40>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
}
 800525e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005270:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <vPortSetupTimerInterrupt+0x30>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <vPortSetupTimerInterrupt+0x34>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800527c:	4b09      	ldr	r3, [pc, #36]	@ (80052a4 <vPortSetupTimerInterrupt+0x38>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a09      	ldr	r2, [pc, #36]	@ (80052a8 <vPortSetupTimerInterrupt+0x3c>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	099b      	lsrs	r3, r3, #6
 8005288:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <vPortSetupTimerInterrupt+0x40>)
 800528a:	3b01      	subs	r3, #1
 800528c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800528e:	4b03      	ldr	r3, [pc, #12]	@ (800529c <vPortSetupTimerInterrupt+0x30>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	e000e010 	.word	0xe000e010
 80052a0:	e000e018 	.word	0xe000e018
 80052a4:	20000008 	.word	0x20000008
 80052a8:	10624dd3 	.word	0x10624dd3
 80052ac:	e000e014 	.word	0xe000e014

080052b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	@ 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052bc:	f7ff fb38 	bl	8004930 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052c0:	4b5c      	ldr	r3, [pc, #368]	@ (8005434 <pvPortMalloc+0x184>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052c8:	f000 f924 	bl	8005514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005438 <pvPortMalloc+0x188>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 8095 	bne.w	8005404 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052e0:	2208      	movs	r2, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d015      	beq.n	800531e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	3308      	adds	r3, #8
 80052fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <pvPortMalloc+0x6e>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d06f      	beq.n	8005404 <pvPortMalloc+0x154>
 8005324:	4b45      	ldr	r3, [pc, #276]	@ (800543c <pvPortMalloc+0x18c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d86a      	bhi.n	8005404 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800532e:	4b44      	ldr	r3, [pc, #272]	@ (8005440 <pvPortMalloc+0x190>)
 8005330:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005332:	4b43      	ldr	r3, [pc, #268]	@ (8005440 <pvPortMalloc+0x190>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005338:	e004      	b.n	8005344 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d903      	bls.n	8005356 <pvPortMalloc+0xa6>
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f1      	bne.n	800533a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005356:	4b37      	ldr	r3, [pc, #220]	@ (8005434 <pvPortMalloc+0x184>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	d051      	beq.n	8005404 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	4413      	add	r3, r2
 8005368:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	2308      	movs	r3, #8
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	429a      	cmp	r2, r3
 8005380:	d920      	bls.n	80053c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <pvPortMalloc+0xfc>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053be:	69b8      	ldr	r0, [r7, #24]
 80053c0:	f000 f90a 	bl	80055d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c4:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <pvPortMalloc+0x18c>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <pvPortMalloc+0x18c>)
 80053d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053d2:	4b1a      	ldr	r3, [pc, #104]	@ (800543c <pvPortMalloc+0x18c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005444 <pvPortMalloc+0x194>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d203      	bcs.n	80053e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053de:	4b17      	ldr	r3, [pc, #92]	@ (800543c <pvPortMalloc+0x18c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <pvPortMalloc+0x194>)
 80053e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4b13      	ldr	r3, [pc, #76]	@ (8005438 <pvPortMalloc+0x188>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053fa:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <pvPortMalloc+0x198>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3301      	adds	r3, #1
 8005400:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <pvPortMalloc+0x198>)
 8005402:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005404:	f7ff faa2 	bl	800494c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <pvPortMalloc+0x17a>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <pvPortMalloc+0x176>
	return pvReturn;
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3728      	adds	r7, #40	@ 0x28
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	200011d0 	.word	0x200011d0
 8005438:	200011e4 	.word	0x200011e4
 800543c:	200011d4 	.word	0x200011d4
 8005440:	200011c8 	.word	0x200011c8
 8005444:	200011d8 	.word	0x200011d8
 8005448:	200011dc 	.word	0x200011dc

0800544c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d04f      	beq.n	80054fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800545e:	2308      	movs	r3, #8
 8005460:	425b      	negs	r3, r3
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <vPortFree+0xbc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <vPortFree+0x46>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <vPortFree+0x66>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b14      	ldr	r3, [pc, #80]	@ (8005508 <vPortFree+0xbc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01e      	beq.n	80054fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d11a      	bne.n	80054fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <vPortFree+0xbc>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054d8:	f7ff fa2a 	bl	8004930 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <vPortFree+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	4a09      	ldr	r2, [pc, #36]	@ (800550c <vPortFree+0xc0>)
 80054e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f000 f874 	bl	80055d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <vPortFree+0xc4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <vPortFree+0xc4>)
 80054f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054fa:	f7ff fa27 	bl	800494c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054fe:	bf00      	nop
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200011e4 	.word	0x200011e4
 800550c:	200011d4 	.word	0x200011d4
 8005510:	200011e0 	.word	0x200011e0

08005514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800551a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800551e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005520:	4b27      	ldr	r3, [pc, #156]	@ (80055c0 <prvHeapInit+0xac>)
 8005522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	4a1f      	ldr	r2, [pc, #124]	@ (80055c0 <prvHeapInit+0xac>)
 8005544:	4413      	add	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800554c:	4a1d      	ldr	r2, [pc, #116]	@ (80055c4 <prvHeapInit+0xb0>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005552:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <prvHeapInit+0xb0>)
 8005554:	2200      	movs	r2, #0
 8005556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005560:	2208      	movs	r2, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0307 	bic.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a15      	ldr	r2, [pc, #84]	@ (80055c8 <prvHeapInit+0xb4>)
 8005574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005576:	4b14      	ldr	r3, [pc, #80]	@ (80055c8 <prvHeapInit+0xb4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2200      	movs	r2, #0
 800557c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800557e:	4b12      	ldr	r3, [pc, #72]	@ (80055c8 <prvHeapInit+0xb4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005594:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <prvHeapInit+0xb4>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <prvHeapInit+0xb8>)
 80055a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4a09      	ldr	r2, [pc, #36]	@ (80055d0 <prvHeapInit+0xbc>)
 80055aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <prvHeapInit+0xc0>)
 80055ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	200005c8 	.word	0x200005c8
 80055c4:	200011c8 	.word	0x200011c8
 80055c8:	200011d0 	.word	0x200011d0
 80055cc:	200011d8 	.word	0x200011d8
 80055d0:	200011d4 	.word	0x200011d4
 80055d4:	200011e4 	.word	0x200011e4

080055d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055e0:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <prvInsertBlockIntoFreeList+0xa8>)
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e002      	b.n	80055ec <prvInsertBlockIntoFreeList+0x14>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d8f7      	bhi.n	80055e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4413      	add	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d108      	bne.n	800561a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	441a      	add	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d118      	bne.n	8005660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b14      	ldr	r3, [pc, #80]	@ (8005684 <prvInsertBlockIntoFreeList+0xac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d00d      	beq.n	8005656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	e008      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <prvInsertBlockIntoFreeList+0xac>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e003      	b.n	8005668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	429a      	cmp	r2, r3
 800566e:	d002      	beq.n	8005676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr
 8005680:	200011c8 	.word	0x200011c8
 8005684:	200011d0 	.word	0x200011d0

08005688 <memset>:
 8005688:	4603      	mov	r3, r0
 800568a:	4402      	add	r2, r0
 800568c:	4293      	cmp	r3, r2
 800568e:	d100      	bne.n	8005692 <memset+0xa>
 8005690:	4770      	bx	lr
 8005692:	f803 1b01 	strb.w	r1, [r3], #1
 8005696:	e7f9      	b.n	800568c <memset+0x4>

08005698 <_reclaim_reent>:
 8005698:	4b29      	ldr	r3, [pc, #164]	@ (8005740 <_reclaim_reent+0xa8>)
 800569a:	b570      	push	{r4, r5, r6, lr}
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4604      	mov	r4, r0
 80056a0:	4283      	cmp	r3, r0
 80056a2:	d04b      	beq.n	800573c <_reclaim_reent+0xa4>
 80056a4:	69c3      	ldr	r3, [r0, #28]
 80056a6:	b1ab      	cbz	r3, 80056d4 <_reclaim_reent+0x3c>
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	b16b      	cbz	r3, 80056c8 <_reclaim_reent+0x30>
 80056ac:	2500      	movs	r5, #0
 80056ae:	69e3      	ldr	r3, [r4, #28]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	5959      	ldr	r1, [r3, r5]
 80056b4:	2900      	cmp	r1, #0
 80056b6:	d13b      	bne.n	8005730 <_reclaim_reent+0x98>
 80056b8:	3504      	adds	r5, #4
 80056ba:	2d80      	cmp	r5, #128	@ 0x80
 80056bc:	d1f7      	bne.n	80056ae <_reclaim_reent+0x16>
 80056be:	69e3      	ldr	r3, [r4, #28]
 80056c0:	4620      	mov	r0, r4
 80056c2:	68d9      	ldr	r1, [r3, #12]
 80056c4:	f000 f864 	bl	8005790 <_free_r>
 80056c8:	69e3      	ldr	r3, [r4, #28]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	b111      	cbz	r1, 80056d4 <_reclaim_reent+0x3c>
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 f85e 	bl	8005790 <_free_r>
 80056d4:	6961      	ldr	r1, [r4, #20]
 80056d6:	b111      	cbz	r1, 80056de <_reclaim_reent+0x46>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 f859 	bl	8005790 <_free_r>
 80056de:	69e1      	ldr	r1, [r4, #28]
 80056e0:	b111      	cbz	r1, 80056e8 <_reclaim_reent+0x50>
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f854 	bl	8005790 <_free_r>
 80056e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80056ea:	b111      	cbz	r1, 80056f2 <_reclaim_reent+0x5a>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 f84f 	bl	8005790 <_free_r>
 80056f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f4:	b111      	cbz	r1, 80056fc <_reclaim_reent+0x64>
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f84a 	bl	8005790 <_free_r>
 80056fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80056fe:	b111      	cbz	r1, 8005706 <_reclaim_reent+0x6e>
 8005700:	4620      	mov	r0, r4
 8005702:	f000 f845 	bl	8005790 <_free_r>
 8005706:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005708:	b111      	cbz	r1, 8005710 <_reclaim_reent+0x78>
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f840 	bl	8005790 <_free_r>
 8005710:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005712:	b111      	cbz	r1, 800571a <_reclaim_reent+0x82>
 8005714:	4620      	mov	r0, r4
 8005716:	f000 f83b 	bl	8005790 <_free_r>
 800571a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800571c:	b111      	cbz	r1, 8005724 <_reclaim_reent+0x8c>
 800571e:	4620      	mov	r0, r4
 8005720:	f000 f836 	bl	8005790 <_free_r>
 8005724:	6a23      	ldr	r3, [r4, #32]
 8005726:	b14b      	cbz	r3, 800573c <_reclaim_reent+0xa4>
 8005728:	4620      	mov	r0, r4
 800572a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800572e:	4718      	bx	r3
 8005730:	680e      	ldr	r6, [r1, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f82c 	bl	8005790 <_free_r>
 8005738:	4631      	mov	r1, r6
 800573a:	e7bb      	b.n	80056b4 <_reclaim_reent+0x1c>
 800573c:	bd70      	pop	{r4, r5, r6, pc}
 800573e:	bf00      	nop
 8005740:	20000018 	.word	0x20000018

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	2600      	movs	r6, #0
 8005748:	4d0c      	ldr	r5, [pc, #48]	@ (800577c <__libc_init_array+0x38>)
 800574a:	4c0d      	ldr	r4, [pc, #52]	@ (8005780 <__libc_init_array+0x3c>)
 800574c:	1b64      	subs	r4, r4, r5
 800574e:	10a4      	asrs	r4, r4, #2
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	f000 f870 	bl	8005838 <_init>
 8005758:	2600      	movs	r6, #0
 800575a:	4d0a      	ldr	r5, [pc, #40]	@ (8005784 <__libc_init_array+0x40>)
 800575c:	4c0a      	ldr	r4, [pc, #40]	@ (8005788 <__libc_init_array+0x44>)
 800575e:	1b64      	subs	r4, r4, r5
 8005760:	10a4      	asrs	r4, r4, #2
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08005a1c 	.word	0x08005a1c
 8005780:	08005a1c 	.word	0x08005a1c
 8005784:	08005a1c 	.word	0x08005a1c
 8005788:	08005a20 	.word	0x08005a20

0800578c <__retarget_lock_acquire_recursive>:
 800578c:	4770      	bx	lr

0800578e <__retarget_lock_release_recursive>:
 800578e:	4770      	bx	lr

08005790 <_free_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4605      	mov	r5, r0
 8005794:	2900      	cmp	r1, #0
 8005796:	d040      	beq.n	800581a <_free_r+0x8a>
 8005798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800579c:	1f0c      	subs	r4, r1, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfb8      	it	lt
 80057a2:	18e4      	addlt	r4, r4, r3
 80057a4:	f000 f83c 	bl	8005820 <__malloc_lock>
 80057a8:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <_free_r+0x8c>)
 80057aa:	6813      	ldr	r3, [r2, #0]
 80057ac:	b933      	cbnz	r3, 80057bc <_free_r+0x2c>
 80057ae:	6063      	str	r3, [r4, #4]
 80057b0:	6014      	str	r4, [r2, #0]
 80057b2:	4628      	mov	r0, r5
 80057b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057b8:	f000 b838 	b.w	800582c <__malloc_unlock>
 80057bc:	42a3      	cmp	r3, r4
 80057be:	d908      	bls.n	80057d2 <_free_r+0x42>
 80057c0:	6820      	ldr	r0, [r4, #0]
 80057c2:	1821      	adds	r1, r4, r0
 80057c4:	428b      	cmp	r3, r1
 80057c6:	bf01      	itttt	eq
 80057c8:	6819      	ldreq	r1, [r3, #0]
 80057ca:	685b      	ldreq	r3, [r3, #4]
 80057cc:	1809      	addeq	r1, r1, r0
 80057ce:	6021      	streq	r1, [r4, #0]
 80057d0:	e7ed      	b.n	80057ae <_free_r+0x1e>
 80057d2:	461a      	mov	r2, r3
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	b10b      	cbz	r3, 80057dc <_free_r+0x4c>
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d9fa      	bls.n	80057d2 <_free_r+0x42>
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	1850      	adds	r0, r2, r1
 80057e0:	42a0      	cmp	r0, r4
 80057e2:	d10b      	bne.n	80057fc <_free_r+0x6c>
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	4401      	add	r1, r0
 80057e8:	1850      	adds	r0, r2, r1
 80057ea:	4283      	cmp	r3, r0
 80057ec:	6011      	str	r1, [r2, #0]
 80057ee:	d1e0      	bne.n	80057b2 <_free_r+0x22>
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4408      	add	r0, r1
 80057f6:	6010      	str	r0, [r2, #0]
 80057f8:	6053      	str	r3, [r2, #4]
 80057fa:	e7da      	b.n	80057b2 <_free_r+0x22>
 80057fc:	d902      	bls.n	8005804 <_free_r+0x74>
 80057fe:	230c      	movs	r3, #12
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	e7d6      	b.n	80057b2 <_free_r+0x22>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	1821      	adds	r1, r4, r0
 8005808:	428b      	cmp	r3, r1
 800580a:	bf01      	itttt	eq
 800580c:	6819      	ldreq	r1, [r3, #0]
 800580e:	685b      	ldreq	r3, [r3, #4]
 8005810:	1809      	addeq	r1, r1, r0
 8005812:	6021      	streq	r1, [r4, #0]
 8005814:	6063      	str	r3, [r4, #4]
 8005816:	6054      	str	r4, [r2, #4]
 8005818:	e7cb      	b.n	80057b2 <_free_r+0x22>
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	20001324 	.word	0x20001324

08005820 <__malloc_lock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_lock+0x8>)
 8005822:	f7ff bfb3 	b.w	800578c <__retarget_lock_acquire_recursive>
 8005826:	bf00      	nop
 8005828:	20001320 	.word	0x20001320

0800582c <__malloc_unlock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_unlock+0x8>)
 800582e:	f7ff bfae 	b.w	800578e <__retarget_lock_release_recursive>
 8005832:	bf00      	nop
 8005834:	20001320 	.word	0x20001320

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
